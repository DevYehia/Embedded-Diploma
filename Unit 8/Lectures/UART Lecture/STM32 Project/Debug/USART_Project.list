
USART_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000b00  08000b00  00010b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b30  08000b30  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b30  08000b30  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b30  08000b30  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b30  08000b30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b34  08000b34  00010b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b38  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000004  08000b3c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000b3c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ea0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003eb  00000000  00000000  00020ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000148  00000000  00000000  000212b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00021400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000149b  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013d8  00000000  00000000  0002299b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004e14  00000000  00000000  00023d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00028b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d4  00000000  00000000  00028c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ae8 	.word	0x08000ae8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000ae8 	.word	0x08000ae8

08000170 <GPIO_init>:
#define GET_CR(pin,GPIO) (((pin) < 8) ? &(GPIO->CRL) : &(GPIO->CRH)) //Determines whether to use CRL or CRH 

#define MAX_PIN 15


void GPIO_init(GPIO_t* GPIOx,GPIO_config_t* config){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    if(config->pinNo > MAX_PIN){ //Invalid Pin No.
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	f200 80b7 	bhi.w	80002f2 <GPIO_init+0x182>
        return;
    }
    volatile uint32_t* CR_reg = GET_CR(config->pinNo,GPIOx);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b07      	cmp	r3, #7
 800018a:	d801      	bhi.n	8000190 <GPIO_init+0x20>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	e001      	b.n	8000194 <GPIO_init+0x24>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	3304      	adds	r3, #4
 8000194:	60bb      	str	r3, [r7, #8]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 8000196:	2300      	movs	r3, #0
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	e019      	b.n	80001d0 <GPIO_init+0x60>
        CLR_BIT(*CR_reg, GET_CR_LSB(config->pinNo) + i);
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	d803      	bhi.n	80001b0 <GPIO_init+0x40>
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	e003      	b.n	80001b8 <GPIO_init+0x48>
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	3b08      	subs	r3, #8
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	68f9      	ldr	r1, [r7, #12]
 80001ba:	440b      	add	r3, r1
 80001bc:	2101      	movs	r1, #1
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	601a      	str	r2, [r3, #0]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	3301      	adds	r3, #1
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	2b03      	cmp	r3, #3
 80001d4:	dde2      	ble.n	800019c <GPIO_init+0x2c>
    }
    if(config->pinMode >= O_PUSH_PULL && config -> pinMode <= O_ALT_OPEN_DRAIN){ //pin is output
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d82d      	bhi.n	800023a <GPIO_init+0xca>
        *CR_reg |= (config->pinSpeed << GET_CR_LSB(config->pinNo)); //set o/p speed in mode bits 
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	4619      	mov	r1, r3
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b07      	cmp	r3, #7
 80001ee:	d803      	bhi.n	80001f8 <GPIO_init+0x88>
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	e003      	b.n	8000200 <GPIO_init+0x90>
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	3b08      	subs	r3, #8
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
 8000204:	431a      	orrs	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	601a      	str	r2, [r3, #0]
        *CR_reg |= ((config->pinMode << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	785b      	ldrb	r3, [r3, #1]
 8000212:	4619      	mov	r1, r3
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d803      	bhi.n	8000224 <GPIO_init+0xb4>
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	e003      	b.n	800022c <GPIO_init+0xbc>
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b08      	subs	r3, #8
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	431a      	orrs	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	e05c      	b.n	80002f4 <GPIO_init+0x184>
    }
    
    else if (config->pinMode == I_ANALOG || config -> pinMode == I_FLOATING){
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	2b04      	cmp	r3, #4
 8000240:	d003      	beq.n	800024a <GPIO_init+0xda>
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	2b05      	cmp	r3, #5
 8000248:	d117      	bne.n	800027a <GPIO_init+0x10a>
        *CR_reg |= (((config->pinMode - 4) << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	785b      	ldrb	r3, [r3, #1]
 8000252:	1f19      	subs	r1, r3, #4
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b07      	cmp	r3, #7
 800025a:	d803      	bhi.n	8000264 <GPIO_init+0xf4>
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	e003      	b.n	800026c <GPIO_init+0xfc>
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	3b08      	subs	r3, #8
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	431a      	orrs	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	e03c      	b.n	80002f4 <GPIO_init+0x184>
    }

    else if (config->pinMode == I_PULL_DOWN || config -> pinMode == I_PULL_UP){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	2b06      	cmp	r3, #6
 8000280:	d003      	beq.n	800028a <GPIO_init+0x11a>
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	2b07      	cmp	r3, #7
 8000288:	d134      	bne.n	80002f4 <GPIO_init+0x184>
        *CR_reg |= ((0b10 << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	7812      	ldrb	r2, [r2, #0]
 8000292:	2a07      	cmp	r2, #7
 8000294:	d807      	bhi.n	80002a6 <GPIO_init+0x136>
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	7812      	ldrb	r2, [r2, #0]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	2102      	movs	r1, #2
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	0092      	lsls	r2, r2, #2
 80002a4:	e007      	b.n	80002b6 <GPIO_init+0x146>
 80002a6:	683a      	ldr	r2, [r7, #0]
 80002a8:	7812      	ldrb	r2, [r2, #0]
 80002aa:	3a08      	subs	r2, #8
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	2102      	movs	r1, #2
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	0092      	lsls	r2, r2, #2
 80002b6:	431a      	orrs	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	601a      	str	r2, [r3, #0]
        if(config->pinMode == I_PULL_DOWN){
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	785b      	ldrb	r3, [r3, #1]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	d10b      	bne.n	80002dc <GPIO_init+0x16c>
            CLR_BIT(GPIOx->ODR,config->pinNo);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	7812      	ldrb	r2, [r2, #0]
 80002cc:	4611      	mov	r1, r2
 80002ce:	2201      	movs	r2, #1
 80002d0:	408a      	lsls	r2, r1
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	e00b      	b.n	80002f4 <GPIO_init+0x184>
        }
        else{
            SET_BIT(GPIOx->ODR,config->pinNo);            
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	7812      	ldrb	r2, [r2, #0]
 80002e4:	4611      	mov	r1, r2
 80002e6:	2201      	movs	r2, #1
 80002e8:	408a      	lsls	r2, r1
 80002ea:	431a      	orrs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	e000      	b.n	80002f4 <GPIO_init+0x184>
        return;
 80002f2:	bf00      	nop
        }        
    }    
}
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <RCC_Get_SYSCLK_freq>:
#define APBconvertPreScaleBitsToShift(bits) (bits) < 4 ? 0 : (bits) - 3


const uint16_t AHBPreScales[16] = {1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 8, 16, 64, 128, 256, 512};

uint32_t RCC_Get_SYSCLK_freq(void){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	if((((RCC->CFGR) >> 2) & 0x3) == 0){
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <RCC_Get_SYSCLK_freq+0x24>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	089b      	lsrs	r3, r3, #2
 8000306:	f003 0303 	and.w	r3, r3, #3
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <RCC_Get_SYSCLK_freq+0x16>
		return HSI_CLK_FREQ;
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <RCC_Get_SYSCLK_freq+0x28>)
 8000310:	e001      	b.n	8000316 <RCC_Get_SYSCLK_freq+0x1a>
	}
	return -1;
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000316:	4618      	mov	r0, r3
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	007a1200 	.word	0x007a1200

08000328 <RCC_Get_AHB_freq>:

uint32_t RCC_Get_AHB_freq(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 4) & 0xF;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <RCC_Get_AHB_freq+0x34>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	71fb      	strb	r3, [r7, #7]
	uint8_t divisor = AHBPreScales[preScaleBits];
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <RCC_Get_AHB_freq+0x38>)
 8000340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000344:	71bb      	strb	r3, [r7, #6]
	return RCC_Get_SYSCLK_freq() / divisor;
 8000346:	f7ff ffd9 	bl	80002fc <RCC_Get_SYSCLK_freq>
 800034a:	4602      	mov	r2, r0
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	fbb2 f3f3 	udiv	r3, r2, r3

}
 8000352:	4618      	mov	r0, r3
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	08000b10 	.word	0x08000b10

08000364 <RCC_Get_APB1_freq>:



uint32_t RCC_Get_APB1_freq(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 8) & 0x7;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <RCC_Get_APB1_freq+0x38>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	0a1b      	lsrs	r3, r3, #8
 8000370:	b2db      	uxtb	r3, r3
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = APBconvertPreScaleBitsToShift(preScaleBits);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b03      	cmp	r3, #3
 800037c:	bf38      	it	cc
 800037e:	2303      	movcc	r3, #3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3b03      	subs	r3, #3
 8000384:	71bb      	strb	r3, [r7, #6]

	return RCC_Get_AHB_freq() >> shift;
 8000386:	f7ff ffcf 	bl	8000328 <RCC_Get_AHB_freq>
 800038a:	4602      	mov	r2, r0
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <RCC_Get_APB2_freq>:


uint32_t RCC_Get_APB2_freq(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 11) & 0x7;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <RCC_Get_APB2_freq+0x38>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	0adb      	lsrs	r3, r3, #11
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = APBconvertPreScaleBitsToShift(preScaleBits);
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	bf38      	it	cc
 80003ba:	2303      	movcc	r3, #3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	3b03      	subs	r3, #3
 80003c0:	71bb      	strb	r3, [r7, #6]

	return RCC_Get_AHB_freq() >> shift;	
 80003c2:	f7ff ffb1 	bl	8000328 <RCC_Get_AHB_freq>
 80003c6:	4602      	mov	r2, r0
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	fa22 f303 	lsr.w	r3, r2, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <UART_init>:
void (*USART_TC_callbacks[5])(void);
void (*USART_RXNE_callbacks[5])(void);
static uint8_t payload_length = -1;
static uint8_t isParityEnabled = 0;

void UART_init(USART_t* usart ,UART_config_t* config){
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]


	uint8_t usart_no = getUsartNo(usart);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a95      	ldr	r2, [pc, #596]	; (8000640 <UART_init+0x264>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d019      	beq.n	8000422 <UART_init+0x46>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a94      	ldr	r2, [pc, #592]	; (8000644 <UART_init+0x268>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d013      	beq.n	800041e <UART_init+0x42>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a93      	ldr	r2, [pc, #588]	; (8000648 <UART_init+0x26c>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d00d      	beq.n	800041a <UART_init+0x3e>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a92      	ldr	r2, [pc, #584]	; (800064c <UART_init+0x270>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d007      	beq.n	8000416 <UART_init+0x3a>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a91      	ldr	r2, [pc, #580]	; (8000650 <UART_init+0x274>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d101      	bne.n	8000412 <UART_init+0x36>
 800040e:	2305      	movs	r3, #5
 8000410:	e008      	b.n	8000424 <UART_init+0x48>
 8000412:	23ff      	movs	r3, #255	; 0xff
 8000414:	e006      	b.n	8000424 <UART_init+0x48>
 8000416:	2304      	movs	r3, #4
 8000418:	e004      	b.n	8000424 <UART_init+0x48>
 800041a:	2303      	movs	r3, #3
 800041c:	e002      	b.n	8000424 <UART_init+0x48>
 800041e:	2302      	movs	r3, #2
 8000420:	e000      	b.n	8000424 <UART_init+0x48>
 8000422:	2301      	movs	r3, #1
 8000424:	753b      	strb	r3, [r7, #20]
	ENABLE_USART(usart_no);
 8000426:	7d3b      	ldrb	r3, [r7, #20]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d106      	bne.n	800043a <UART_init+0x5e>
 800042c:	4b89      	ldr	r3, [pc, #548]	; (8000654 <UART_init+0x278>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a88      	ldr	r2, [pc, #544]	; (8000654 <UART_init+0x278>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	e010      	b.n	800045c <UART_init+0x80>
 800043a:	7d3b      	ldrb	r3, [r7, #20]
 800043c:	2b05      	cmp	r3, #5
 800043e:	d80d      	bhi.n	800045c <UART_init+0x80>
 8000440:	7d3b      	ldrb	r3, [r7, #20]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d90a      	bls.n	800045c <UART_init+0x80>
 8000446:	4b83      	ldr	r3, [pc, #524]	; (8000654 <UART_init+0x278>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	7d3a      	ldrb	r2, [r7, #20]
 800044c:	320f      	adds	r2, #15
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a7f      	ldr	r2, [pc, #508]	; (8000654 <UART_init+0x278>)
 8000458:	430b      	orrs	r3, r1
 800045a:	61d3      	str	r3, [r2, #28]


	//enable the UART
	SET_BIT(usart->CR1,13);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	60da      	str	r2, [r3, #12]


	//set character size
	payload_length = config->char_size;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	79da      	ldrb	r2, [r3, #7]
 800046c:	4b7a      	ldr	r3, [pc, #488]	; (8000658 <UART_init+0x27c>)
 800046e:	701a      	strb	r2, [r3, #0]
	if(config->char_size == EIGHT_BIT_CHAR){
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	79db      	ldrb	r3, [r3, #7]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d106      	bne.n	8000486 <UART_init+0xaa>
		CLR_BIT(usart->CR1,12);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	e009      	b.n	800049a <UART_init+0xbe>
	}
	else if(config->char_size == NINE_BIT_CHAR){
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	79db      	ldrb	r3, [r3, #7]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d105      	bne.n	800049a <UART_init+0xbe>
		SET_BIT(usart->CR1,12);		
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60da      	str	r2, [r3, #12]
	}

	//set stop bits number
	CLR_BIT(usart->CR2,12);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	611a      	str	r2, [r3, #16]
	CLR_BIT(usart->CR2,13);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	611a      	str	r2, [r3, #16]
	(usart->CR2) |= (config->num_stop_bits);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	691b      	ldr	r3, [r3, #16]
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	7992      	ldrb	r2, [r2, #6]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	611a      	str	r2, [r3, #16]

    //set parity
    if(config->parity_mode != NO_PARITY){
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d003      	beq.n	80004d0 <UART_init+0xf4>
    	isParityEnabled = 1;
 80004c8:	4b64      	ldr	r3, [pc, #400]	; (800065c <UART_init+0x280>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	e002      	b.n	80004d6 <UART_init+0xfa>
    }
    else{
    	isParityEnabled = 0;
 80004d0:	4b62      	ldr	r3, [pc, #392]	; (800065c <UART_init+0x280>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
    }
	CLR_BIT(usart->CR1,10);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60da      	str	r2, [r3, #12]
	CLR_BIT(usart->CR1,9);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	60da      	str	r2, [r3, #12]

	(usart->CR1) |= ((config->parity_mode) << 9);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	7952      	ldrb	r2, [r2, #5]
 80004f6:	0252      	lsls	r2, r2, #9
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	60da      	str	r2, [r3, #12]

	//select baud rate
	uint16_t int_part;
	uint8_t  fraction_part;
	if(usart == USART1){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a4f      	ldr	r2, [pc, #316]	; (8000640 <UART_init+0x264>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d126      	bne.n	8000554 <UART_init+0x178>
		uint32_t APB2_freq = RCC_Get_APB2_freq();
 8000506:	f7ff ff4b 	bl	80003a0 <RCC_Get_APB2_freq>
 800050a:	60f8      	str	r0, [r7, #12]
		int_part = INTEGER_PART(APB2_freq,config->baud_rate);
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	011b      	lsls	r3, r3, #4
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	fbb2 f3f3 	udiv	r3, r2, r3
 8000518:	82fb      	strh	r3, [r7, #22]
		fraction_part = FRACTIONAL_PART(APB2_freq,config->baud_rate);
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009a      	lsls	r2, r3, #2
 8000524:	441a      	add	r2, r3
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	68f9      	ldr	r1, [r7, #12]
 8000538:	fbb1 f3f3 	udiv	r3, r1, r3
 800053c:	2164      	movs	r1, #100	; 0x64
 800053e:	fb01 f303 	mul.w	r3, r1, r3
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	3332      	adds	r3, #50	; 0x32
 8000548:	4a45      	ldr	r2, [pc, #276]	; (8000660 <UART_init+0x284>)
 800054a:	fba2 2303 	umull	r2, r3, r2, r3
 800054e:	095b      	lsrs	r3, r3, #5
 8000550:	757b      	strb	r3, [r7, #21]
 8000552:	e025      	b.n	80005a0 <UART_init+0x1c4>
	}
	else{
		uint32_t APB1_freq = RCC_Get_APB1_freq();
 8000554:	f7ff ff06 	bl	8000364 <RCC_Get_APB1_freq>
 8000558:	6138      	str	r0, [r7, #16]
		int_part = INTEGER_PART(APB1_freq,config->baud_rate);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	82fb      	strh	r3, [r7, #22]
		fraction_part = FRACTIONAL_PART(APB1_freq,config->baud_rate);
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	009a      	lsls	r2, r3, #2
 8000572:	441a      	add	r2, r3
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	fbb2 f2f3 	udiv	r2, r2, r3
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	6939      	ldr	r1, [r7, #16]
 8000586:	fbb1 f3f3 	udiv	r3, r1, r3
 800058a:	2164      	movs	r1, #100	; 0x64
 800058c:	fb01 f303 	mul.w	r3, r1, r3
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	3332      	adds	r3, #50	; 0x32
 8000596:	4a32      	ldr	r2, [pc, #200]	; (8000660 <UART_init+0x284>)
 8000598:	fba2 2303 	umull	r2, r3, r2, r3
 800059c:	095b      	lsrs	r3, r3, #5
 800059e:	757b      	strb	r3, [r7, #21]
	}

	if(fraction_part == 0x10){ //overflow of fractional part
 80005a0:	7d7b      	ldrb	r3, [r7, #21]
 80005a2:	2b10      	cmp	r3, #16
 80005a4:	d102      	bne.n	80005ac <UART_init+0x1d0>
		int_part++;
 80005a6:	8afb      	ldrh	r3, [r7, #22]
 80005a8:	3301      	adds	r3, #1
 80005aa:	82fb      	strh	r3, [r7, #22]
	}
	usart->BRR = 0; //clear before modification
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
	usart->BRR = (int_part << 4) | (fraction_part & 0xF);
 80005b2:	8afb      	ldrh	r3, [r7, #22]
 80005b4:	011a      	lsls	r2, r3, #4
 80005b6:	7d7b      	ldrb	r3, [r7, #21]
 80005b8:	f003 030f 	and.w	r3, r3, #15
 80005bc:	4313      	orrs	r3, r2
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]

    //enable/disable selected TX and RX
	switch(config->enable_sel){
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d858      	bhi.n	800067e <UART_init+0x2a2>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <UART_init+0x1f8>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005ed 	.word	0x080005ed
 80005d8:	080005fb 	.word	0x080005fb
 80005dc:	08000609 	.word	0x08000609
 80005e0:	08000623 	.word	0x08000623
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000665 	.word	0x08000665
		case ENABLE_TX:
		{
			SET_BIT(usart->CR1, 3);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	f043 0208 	orr.w	r2, r3, #8
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]
		} 
		break;
 80005f8:	e041      	b.n	800067e <UART_init+0x2a2>
		case ENABLE_RX:
		{
			SET_BIT(usart->CR1, 2);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	f043 0204 	orr.w	r2, r3, #4
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000606:	e03a      	b.n	800067e <UART_init+0x2a2>
		case ENABLE_RX_TX:
		{
			SET_BIT(usart->CR1, 2);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	f043 0204 	orr.w	r2, r3, #4
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]
			SET_BIT(usart->CR1, 3);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f043 0208 	orr.w	r2, r3, #8
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000620:	e02d      	b.n	800067e <UART_init+0x2a2>
		case DISABLE_TX:
		{
			CLR_BIT(usart->CR1, 3);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	f023 0208 	bic.w	r2, r3, #8
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60da      	str	r2, [r3, #12]
		} 
		break;
 800062e:	e026      	b.n	800067e <UART_init+0x2a2>
		case DISABLE_RX:
		{
			CLR_BIT(usart->CR1, 2);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	f023 0204 	bic.w	r2, r3, #4
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60da      	str	r2, [r3, #12]
		} 
		break;
 800063c:	e01f      	b.n	800067e <UART_init+0x2a2>
 800063e:	bf00      	nop
 8000640:	40013800 	.word	0x40013800
 8000644:	40004400 	.word	0x40004400
 8000648:	40004800 	.word	0x40004800
 800064c:	40004c00 	.word	0x40004c00
 8000650:	40005000 	.word	0x40005000
 8000654:	40021000 	.word	0x40021000
 8000658:	20000000 	.word	0x20000000
 800065c:	20000020 	.word	0x20000020
 8000660:	51eb851f 	.word	0x51eb851f
		case DISABLE_RX_TX:
		{
			CLR_BIT(usart->CR1, 2);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f023 0204 	bic.w	r2, r3, #4
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	60da      	str	r2, [r3, #12]
			CLR_BIT(usart->CR1, 3);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	f023 0208 	bic.w	r2, r3, #8
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
		} 
		break;		
 800067c:	bf00      	nop
	}

    //Enable/Disable selected interrupt
    uint8_t irq = getUsartIRQ(usart);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a22      	ldr	r2, [pc, #136]	; (800070c <UART_init+0x330>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d019      	beq.n	80006ba <UART_init+0x2de>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <UART_init+0x334>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d013      	beq.n	80006b6 <UART_init+0x2da>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <UART_init+0x338>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00d      	beq.n	80006b2 <UART_init+0x2d6>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <UART_init+0x33c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d007      	beq.n	80006ae <UART_init+0x2d2>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a1e      	ldr	r2, [pc, #120]	; (800071c <UART_init+0x340>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <UART_init+0x2ce>
 80006a6:	2335      	movs	r3, #53	; 0x35
 80006a8:	e008      	b.n	80006bc <UART_init+0x2e0>
 80006aa:	23ff      	movs	r3, #255	; 0xff
 80006ac:	e006      	b.n	80006bc <UART_init+0x2e0>
 80006ae:	2334      	movs	r3, #52	; 0x34
 80006b0:	e004      	b.n	80006bc <UART_init+0x2e0>
 80006b2:	2327      	movs	r3, #39	; 0x27
 80006b4:	e002      	b.n	80006bc <UART_init+0x2e0>
 80006b6:	2326      	movs	r3, #38	; 0x26
 80006b8:	e000      	b.n	80006bc <UART_init+0x2e0>
 80006ba:	2325      	movs	r3, #37	; 0x25
 80006bc:	72fb      	strb	r3, [r7, #11]
	if(config->enable_irq <= TXE_ENABLE && config->enable_irq >= RXNE_ENABLE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	7a5b      	ldrb	r3, [r3, #9]
 80006c2:	2b80      	cmp	r3, #128	; 0x80
 80006c4:	d81d      	bhi.n	8000702 <UART_init+0x326>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	7a5b      	ldrb	r3, [r3, #9]
 80006ca:	2b1f      	cmp	r3, #31
 80006cc:	d919      	bls.n	8000702 <UART_init+0x326>
		(usart->CR1) |= (config->enable_irq);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	7a52      	ldrb	r2, [r2, #9]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60da      	str	r2, [r3, #12]
		SET_BIT(NVIC->ISER[irq / 32],irq % 32);
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <UART_init+0x344>)
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	095b      	lsrs	r3, r3, #5
 80006e2:	b2d8      	uxtb	r0, r3
 80006e4:	4603      	mov	r3, r0
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	7afa      	ldrb	r2, [r7, #11]
 80006ec:	f002 021f 	and.w	r2, r2, #31
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4614      	mov	r4, r2
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <UART_init+0x344>)
 80006fa:	4601      	mov	r1, r0
 80006fc:	4323      	orrs	r3, r4
 80006fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	else if(config->enable_irq <= RXNE_DISABLE && config->enable_irq >= TXE_DISABLE){
		(usart->CR1) &= (config->enable_irq);
		SET_BIT(NVIC->ICER[irq / 32],irq % 32);
	}

}
 8000702:	bf00      	nop
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	bf00      	nop
 800070c:	40013800 	.word	0x40013800
 8000710:	40004400 	.word	0x40004400
 8000714:	40004800 	.word	0x40004800
 8000718:	40004c00 	.word	0x40004c00
 800071c:	40005000 	.word	0x40005000
 8000720:	e000e100 	.word	0xe000e100

08000724 <UART_send_data>:

void UART_set_RXNE_callback(void (*func)(void),USART_t* usart){
	USART_RXNE_callbacks[getUsartNo(usart)] = func;
}

void UART_send_data(USART_t* usart, uint16_t data, uint8_t poll){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
	if(poll != NO_POLL){
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d007      	beq.n	800074a <UART_send_data+0x26>
		while(GET_BIT(usart->SR,7) == 0);
 800073a:	bf00      	nop
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f8      	beq.n	800073c <UART_send_data+0x18>
	}
	usart->DR = data;
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <UART_receive_data>:
uint16_t UART_receive_data(USART_t* usart, uint8_t poll){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	if(poll != NO_POLL){
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d007      	beq.n	800077e <UART_receive_data+0x22>
		while(GET_BIT(usart->SR,5) == 0);
 800076e:	bf00      	nop
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	095b      	lsrs	r3, r3, #5
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <UART_receive_data+0x14>
	}	
	if(isParityEnabled){
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <UART_receive_data+0x6c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d017      	beq.n	80007b6 <UART_receive_data+0x5a>
		if(payload_length == EIGHT_BIT_CHAR){
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <UART_receive_data+0x70>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <UART_receive_data+0x40>
			return (usart->DR) & 0x7F;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000798:	b29b      	uxth	r3, r3
 800079a:	e00f      	b.n	80007bc <UART_receive_data+0x60>
		}
		else if(payload_length == NINE_BIT_CHAR){
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <UART_receive_data+0x70>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d105      	bne.n	80007b0 <UART_receive_data+0x54>
			return (usart->DR) & 0xFF;		
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	e005      	b.n	80007bc <UART_receive_data+0x60>
		}
		else{
			return -1;
 80007b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b4:	e002      	b.n	80007bc <UART_receive_data+0x60>
		}
	}
	else{
		return usart->DR;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	b29b      	uxth	r3, r3
	}


}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000020 	.word	0x20000020
 80007cc:	20000000 	.word	0x20000000

080007d0 <USART1_IRQHandler>:



USART_HANDLER(1)
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <USART1_IRQHandler+0x54>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	09db      	lsrs	r3, r3, #7
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d103      	bne.n	80007ea <USART1_IRQHandler+0x1a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <USART1_IRQHandler+0x58>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4798      	blx	r3
 80007e8:	e01a      	b.n	8000820 <USART1_IRQHandler+0x50>
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <USART1_IRQHandler+0x54>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	099b      	lsrs	r3, r3, #6
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d109      	bne.n	800080c <USART1_IRQHandler+0x3c>
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <USART1_IRQHandler+0x5c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4798      	blx	r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <USART1_IRQHandler+0x54>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <USART1_IRQHandler+0x54>)
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e009      	b.n	8000820 <USART1_IRQHandler+0x50>
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <USART1_IRQHandler+0x54>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	095b      	lsrs	r3, r3, #5
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b01      	cmp	r3, #1
 8000818:	d102      	bne.n	8000820 <USART1_IRQHandler+0x50>
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <USART1_IRQHandler+0x60>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4798      	blx	r3
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013800 	.word	0x40013800
 8000828:	20000024 	.word	0x20000024
 800082c:	2000004c 	.word	0x2000004c
 8000830:	20000038 	.word	0x20000038

08000834 <USART2_IRQHandler>:
USART_HANDLER(2)
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <USART2_IRQHandler+0x54>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	09db      	lsrs	r3, r3, #7
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	2b01      	cmp	r3, #1
 8000844:	d103      	bne.n	800084e <USART2_IRQHandler+0x1a>
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <USART2_IRQHandler+0x58>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4798      	blx	r3
 800084c:	e01a      	b.n	8000884 <USART2_IRQHandler+0x50>
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <USART2_IRQHandler+0x54>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	099b      	lsrs	r3, r3, #6
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b01      	cmp	r3, #1
 800085a:	d109      	bne.n	8000870 <USART2_IRQHandler+0x3c>
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <USART2_IRQHandler+0x5c>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4798      	blx	r3
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <USART2_IRQHandler+0x54>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <USART2_IRQHandler+0x54>)
 8000868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e009      	b.n	8000884 <USART2_IRQHandler+0x50>
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <USART2_IRQHandler+0x54>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	095b      	lsrs	r3, r3, #5
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b01      	cmp	r3, #1
 800087c:	d102      	bne.n	8000884 <USART2_IRQHandler+0x50>
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <USART2_IRQHandler+0x60>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4798      	blx	r3
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40004400 	.word	0x40004400
 800088c:	20000024 	.word	0x20000024
 8000890:	2000004c 	.word	0x2000004c
 8000894:	20000038 	.word	0x20000038

08000898 <USART3_IRQHandler>:
USART_HANDLER(3)
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <USART3_IRQHandler+0x54>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	09db      	lsrs	r3, r3, #7
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d103      	bne.n	80008b2 <USART3_IRQHandler+0x1a>
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <USART3_IRQHandler+0x58>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4798      	blx	r3
 80008b0:	e01a      	b.n	80008e8 <USART3_IRQHandler+0x50>
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <USART3_IRQHandler+0x54>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	099b      	lsrs	r3, r3, #6
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d109      	bne.n	80008d4 <USART3_IRQHandler+0x3c>
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <USART3_IRQHandler+0x5c>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4798      	blx	r3
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <USART3_IRQHandler+0x54>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <USART3_IRQHandler+0x54>)
 80008cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e009      	b.n	80008e8 <USART3_IRQHandler+0x50>
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <USART3_IRQHandler+0x54>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	095b      	lsrs	r3, r3, #5
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d102      	bne.n	80008e8 <USART3_IRQHandler+0x50>
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <USART3_IRQHandler+0x60>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4798      	blx	r3
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004800 	.word	0x40004800
 80008f0:	20000024 	.word	0x20000024
 80008f4:	2000004c 	.word	0x2000004c
 80008f8:	20000038 	.word	0x20000038

080008fc <UART4_IRQHandler>:
UART_HANDLER(4)
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <UART4_IRQHandler+0x54>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	09db      	lsrs	r3, r3, #7
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <UART4_IRQHandler+0x1a>
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <UART4_IRQHandler+0x58>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	4798      	blx	r3
 8000914:	e01a      	b.n	800094c <UART4_IRQHandler+0x50>
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <UART4_IRQHandler+0x54>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	099b      	lsrs	r3, r3, #6
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b01      	cmp	r3, #1
 8000922:	d109      	bne.n	8000938 <UART4_IRQHandler+0x3c>
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <UART4_IRQHandler+0x5c>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4798      	blx	r3
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <UART4_IRQHandler+0x54>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <UART4_IRQHandler+0x54>)
 8000930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e009      	b.n	800094c <UART4_IRQHandler+0x50>
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <UART4_IRQHandler+0x54>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <UART4_IRQHandler+0x50>
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <UART4_IRQHandler+0x60>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	4798      	blx	r3
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004c00 	.word	0x40004c00
 8000954:	20000024 	.word	0x20000024
 8000958:	2000004c 	.word	0x2000004c
 800095c:	20000038 	.word	0x20000038

08000960 <UART5_IRQHandler>:
UART_HANDLER(5)
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <UART5_IRQHandler+0x54>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	09db      	lsrs	r3, r3, #7
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b01      	cmp	r3, #1
 8000970:	d103      	bne.n	800097a <UART5_IRQHandler+0x1a>
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <UART5_IRQHandler+0x58>)
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	4798      	blx	r3
 8000978:	e01a      	b.n	80009b0 <UART5_IRQHandler+0x50>
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <UART5_IRQHandler+0x54>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	099b      	lsrs	r3, r3, #6
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b01      	cmp	r3, #1
 8000986:	d109      	bne.n	800099c <UART5_IRQHandler+0x3c>
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <UART5_IRQHandler+0x5c>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	4798      	blx	r3
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <UART5_IRQHandler+0x54>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <UART5_IRQHandler+0x54>)
 8000994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	e009      	b.n	80009b0 <UART5_IRQHandler+0x50>
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <UART5_IRQHandler+0x54>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	095b      	lsrs	r3, r3, #5
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d102      	bne.n	80009b0 <UART5_IRQHandler+0x50>
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <UART5_IRQHandler+0x60>)
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	4798      	blx	r3
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40005000 	.word	0x40005000
 80009b8:	20000024 	.word	0x20000024
 80009bc:	2000004c 	.word	0x2000004c
 80009c0:	20000038 	.word	0x20000038

080009c4 <main>:

#include "../MCAL/usart.h"
#include "../MCAL/gpio.h"

int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
	ENABLE_GPIOA();
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <main+0x74>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <main+0x74>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6193      	str	r3, [r2, #24]
	//ENABLE_AFIO();
	GPIO_config_t conf = {PIN9,O_ALT_PUSH_PULL,MAX_10_MHZ};
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <main+0x78>)
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	4611      	mov	r1, r2
 80009e0:	8019      	strh	r1, [r3, #0]
 80009e2:	3302      	adds	r3, #2
 80009e4:	0c12      	lsrs	r2, r2, #16
 80009e6:	701a      	strb	r2, [r3, #0]
	GPIO_init(GPIOA, &conf);
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	4619      	mov	r1, r3
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <main+0x7c>)
 80009f0:	f7ff fbbe 	bl	8000170 <GPIO_init>
	conf.pinNo = PIN10;
 80009f4:	230a      	movs	r3, #10
 80009f6:	743b      	strb	r3, [r7, #16]
	conf.pinMode = I_FLOATING;
 80009f8:	2305      	movs	r3, #5
 80009fa:	747b      	strb	r3, [r7, #17]
	GPIO_init(GPIOA, &conf);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x7c>)
 8000a04:	f7ff fbb4 	bl	8000170 <GPIO_init>
	UART_config_t config = {9600, ASYNC_MODE, NO_PARITY, ONE_STOP, EIGHT_BIT_CHAR, ENABLE_RX_TX, 0};
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <main+0x80>)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	UART_init(USART1, &config);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <main+0x84>)
 8000a18:	f7ff fce0 	bl	80003dc <UART_init>
	//conf.pin
    /* Loop forever */
	for(;;){
		uint16_t c = UART_receive_data(USART1, POLL);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <main+0x84>)
 8000a20:	f7ff fe9c 	bl	800075c <UART_receive_data>
 8000a24:	4603      	mov	r3, r0
 8000a26:	82fb      	strh	r3, [r7, #22]
		UART_send_data(USART1, c, POLL);
 8000a28:	8afb      	ldrh	r3, [r7, #22]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <main+0x84>)
 8000a30:	f7ff fe78 	bl	8000724 <UART_send_data>
	for(;;){
 8000a34:	e7f2      	b.n	8000a1c <main+0x58>
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	08000b00 	.word	0x08000b00
 8000a40:	40010800 	.word	0x40010800
 8000a44:	08000b04 	.word	0x08000b04
 8000a48:	40013800 	.word	0x40013800

08000a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f000 f811 	bl	8000aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff ffa1 	bl	80009c4 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a90:	08000b38 	.word	0x08000b38
  ldr r2, =_sbss
 8000a94:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a98:	20000060 	.word	0x20000060

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <__libc_init_array>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	4e0c      	ldr	r6, [pc, #48]	; (8000ad8 <__libc_init_array+0x38>)
 8000aa6:	4c0d      	ldr	r4, [pc, #52]	; (8000adc <__libc_init_array+0x3c>)
 8000aa8:	1ba4      	subs	r4, r4, r6
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	42a5      	cmp	r5, r4
 8000aae:	d109      	bne.n	8000ac4 <__libc_init_array+0x24>
 8000ab0:	f000 f81a 	bl	8000ae8 <_init>
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	4e0a      	ldr	r6, [pc, #40]	; (8000ae0 <__libc_init_array+0x40>)
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <__libc_init_array+0x44>)
 8000aba:	1ba4      	subs	r4, r4, r6
 8000abc:	10a4      	asrs	r4, r4, #2
 8000abe:	42a5      	cmp	r5, r4
 8000ac0:	d105      	bne.n	8000ace <__libc_init_array+0x2e>
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ac8:	4798      	blx	r3
 8000aca:	3501      	adds	r5, #1
 8000acc:	e7ee      	b.n	8000aac <__libc_init_array+0xc>
 8000ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ad2:	4798      	blx	r3
 8000ad4:	3501      	adds	r5, #1
 8000ad6:	e7f2      	b.n	8000abe <__libc_init_array+0x1e>
 8000ad8:	08000b30 	.word	0x08000b30
 8000adc:	08000b30 	.word	0x08000b30
 8000ae0:	08000b30 	.word	0x08000b30
 8000ae4:	08000b34 	.word	0x08000b34

08000ae8 <_init>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr

08000af4 <_fini>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr
