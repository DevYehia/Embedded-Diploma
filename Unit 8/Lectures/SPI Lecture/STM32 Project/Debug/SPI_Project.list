
SPI_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001074  08001074  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001074  08001074  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001074  08001074  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001078  08001078  00011078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800107c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  08001080  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001080  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001891  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000065c  00000000  00000000  000218be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a2c  00000000  00000000  00021f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00022948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00022af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000171f  00000000  00000000  00022c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000017a2  00000000  00000000  0002435f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000052d2  00000000  00000000  00025b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002add3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000530  00000000  00000000  0002ae50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800103c 	.word	0x0800103c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800103c 	.word	0x0800103c

08000170 <GPIO_init>:
#define GET_CR(pin,GPIO) (((pin) < 8) ? &(GPIO->CRL) : &(GPIO->CRH)) //Determines whether to use CRL or CRH 

#define MAX_PIN 15


void GPIO_init(GPIO_t* GPIOx,GPIO_config_t* config){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    if(config->pinNo > MAX_PIN){ //Invalid Pin No.
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	f200 80ed 	bhi.w	800035e <GPIO_init+0x1ee>
        return;
    }

    //Enable GPIO Clock
    if(GPIOx == GPIOA){
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4a78      	ldr	r2, [pc, #480]	; (8000368 <GPIO_init+0x1f8>)
 8000188:	4293      	cmp	r3, r2
 800018a:	d106      	bne.n	800019a <GPIO_init+0x2a>
        ENABLE_GPIOA();
 800018c:	4b77      	ldr	r3, [pc, #476]	; (800036c <GPIO_init+0x1fc>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a76      	ldr	r2, [pc, #472]	; (800036c <GPIO_init+0x1fc>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6193      	str	r3, [r2, #24]
 8000198:	e02a      	b.n	80001f0 <GPIO_init+0x80>
    }
    else if(GPIOx == GPIOB){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4a74      	ldr	r2, [pc, #464]	; (8000370 <GPIO_init+0x200>)
 800019e:	4293      	cmp	r3, r2
 80001a0:	d106      	bne.n	80001b0 <GPIO_init+0x40>
        ENABLE_GPIOB();
 80001a2:	4b72      	ldr	r3, [pc, #456]	; (800036c <GPIO_init+0x1fc>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a71      	ldr	r2, [pc, #452]	; (800036c <GPIO_init+0x1fc>)
 80001a8:	f043 0308 	orr.w	r3, r3, #8
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	e01f      	b.n	80001f0 <GPIO_init+0x80>
    } 
    else if(GPIOx == GPIOC){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4a70      	ldr	r2, [pc, #448]	; (8000374 <GPIO_init+0x204>)
 80001b4:	4293      	cmp	r3, r2
 80001b6:	d106      	bne.n	80001c6 <GPIO_init+0x56>
        ENABLE_GPIOC();
 80001b8:	4b6c      	ldr	r3, [pc, #432]	; (800036c <GPIO_init+0x1fc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a6b      	ldr	r2, [pc, #428]	; (800036c <GPIO_init+0x1fc>)
 80001be:	f043 0310 	orr.w	r3, r3, #16
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	e014      	b.n	80001f0 <GPIO_init+0x80>
    }    
    else if(GPIOx == GPIOD){
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4a6b      	ldr	r2, [pc, #428]	; (8000378 <GPIO_init+0x208>)
 80001ca:	4293      	cmp	r3, r2
 80001cc:	d106      	bne.n	80001dc <GPIO_init+0x6c>
        ENABLE_GPIOD();
 80001ce:	4b67      	ldr	r3, [pc, #412]	; (800036c <GPIO_init+0x1fc>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	4a66      	ldr	r2, [pc, #408]	; (800036c <GPIO_init+0x1fc>)
 80001d4:	f043 0320 	orr.w	r3, r3, #32
 80001d8:	6193      	str	r3, [r2, #24]
 80001da:	e009      	b.n	80001f0 <GPIO_init+0x80>
    }    
    else if(GPIOx == GPIOE){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a67      	ldr	r2, [pc, #412]	; (800037c <GPIO_init+0x20c>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d105      	bne.n	80001f0 <GPIO_init+0x80>
        ENABLE_GPIOE();
 80001e4:	4b61      	ldr	r3, [pc, #388]	; (800036c <GPIO_init+0x1fc>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a60      	ldr	r2, [pc, #384]	; (800036c <GPIO_init+0x1fc>)
 80001ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ee:	6193      	str	r3, [r2, #24]
    }       
    
    volatile uint32_t* CR_reg = GET_CR(config->pinNo,GPIOx);
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b07      	cmp	r3, #7
 80001f6:	d801      	bhi.n	80001fc <GPIO_init+0x8c>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	e001      	b.n	8000200 <GPIO_init+0x90>
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3304      	adds	r3, #4
 8000200:	60bb      	str	r3, [r7, #8]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	e019      	b.n	800023c <GPIO_init+0xcc>
        CLR_BIT(*CR_reg, GET_CR_LSB(config->pinNo) + i);
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b07      	cmp	r3, #7
 8000212:	d803      	bhi.n	800021c <GPIO_init+0xac>
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	e003      	b.n	8000224 <GPIO_init+0xb4>
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3b08      	subs	r3, #8
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	68f9      	ldr	r1, [r7, #12]
 8000226:	440b      	add	r3, r1
 8000228:	2101      	movs	r1, #1
 800022a:	fa01 f303 	lsl.w	r3, r1, r3
 800022e:	43db      	mvns	r3, r3
 8000230:	401a      	ands	r2, r3
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	601a      	str	r2, [r3, #0]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b03      	cmp	r3, #3
 8000240:	dde2      	ble.n	8000208 <GPIO_init+0x98>
    }
    if(config->pinMode >= O_PUSH_PULL && config -> pinMode <= O_ALT_OPEN_DRAIN){ //pin is output
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d82d      	bhi.n	80002a6 <GPIO_init+0x136>
        *CR_reg |= (config->pinSpeed << GET_CR_LSB(config->pinNo)); //set o/p speed in mode bits 
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	4619      	mov	r1, r3
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b07      	cmp	r3, #7
 800025a:	d803      	bhi.n	8000264 <GPIO_init+0xf4>
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	e003      	b.n	800026c <GPIO_init+0xfc>
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	3b08      	subs	r3, #8
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	431a      	orrs	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]
        *CR_reg |= ((config->pinMode << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	4619      	mov	r1, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b07      	cmp	r3, #7
 8000286:	d803      	bhi.n	8000290 <GPIO_init+0x120>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	e003      	b.n	8000298 <GPIO_init+0x128>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3b08      	subs	r3, #8
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	e05c      	b.n	8000360 <GPIO_init+0x1f0>
    }
    
    else if (config->pinMode == I_ANALOG || config -> pinMode == I_FLOATING){
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d003      	beq.n	80002b6 <GPIO_init+0x146>
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	785b      	ldrb	r3, [r3, #1]
 80002b2:	2b05      	cmp	r3, #5
 80002b4:	d117      	bne.n	80002e6 <GPIO_init+0x176>
        *CR_reg |= (((config->pinMode - 4) << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	785b      	ldrb	r3, [r3, #1]
 80002be:	1f19      	subs	r1, r3, #4
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b07      	cmp	r3, #7
 80002c6:	d803      	bhi.n	80002d0 <GPIO_init+0x160>
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	e003      	b.n	80002d8 <GPIO_init+0x168>
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	3b08      	subs	r3, #8
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	431a      	orrs	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	e03c      	b.n	8000360 <GPIO_init+0x1f0>
    }

    else if (config->pinMode == I_PULL_DOWN || config -> pinMode == I_PULL_UP){
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	2b06      	cmp	r3, #6
 80002ec:	d003      	beq.n	80002f6 <GPIO_init+0x186>
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	2b07      	cmp	r3, #7
 80002f4:	d134      	bne.n	8000360 <GPIO_init+0x1f0>
        *CR_reg |= ((0b10 << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	2a07      	cmp	r2, #7
 8000300:	d807      	bhi.n	8000312 <GPIO_init+0x1a2>
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	7812      	ldrb	r2, [r2, #0]
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	2102      	movs	r1, #2
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	e007      	b.n	8000322 <GPIO_init+0x1b2>
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	3a08      	subs	r2, #8
 8000318:	0092      	lsls	r2, r2, #2
 800031a:	2102      	movs	r1, #2
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	0092      	lsls	r2, r2, #2
 8000322:	431a      	orrs	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	601a      	str	r2, [r3, #0]
        if(config->pinMode == I_PULL_DOWN){
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	785b      	ldrb	r3, [r3, #1]
 800032c:	2b06      	cmp	r3, #6
 800032e:	d10b      	bne.n	8000348 <GPIO_init+0x1d8>
            CLR_BIT(GPIOx->ODR,config->pinNo);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	683a      	ldr	r2, [r7, #0]
 8000336:	7812      	ldrb	r2, [r2, #0]
 8000338:	4611      	mov	r1, r2
 800033a:	2201      	movs	r2, #1
 800033c:	408a      	lsls	r2, r1
 800033e:	43d2      	mvns	r2, r2
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	e00b      	b.n	8000360 <GPIO_init+0x1f0>
        }
        else{
            SET_BIT(GPIOx->ODR,config->pinNo);            
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	7812      	ldrb	r2, [r2, #0]
 8000350:	4611      	mov	r1, r2
 8000352:	2201      	movs	r2, #1
 8000354:	408a      	lsls	r2, r1
 8000356:	431a      	orrs	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	e000      	b.n	8000360 <GPIO_init+0x1f0>
        return;
 800035e:	bf00      	nop
        }        
    }    
}
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40010800 	.word	0x40010800
 800036c:	40021000 	.word	0x40021000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40011000 	.word	0x40011000
 8000378:	40011400 	.word	0x40011400
 800037c:	40011800 	.word	0x40011800

08000380 <GPIO_write_pin>:

uint16_t GPIO_read_port(GPIO_t* GPIOx){
    return GPIOx->IDR;
}

void GPIO_write_pin(GPIO_t* GPIOx, uint8_t pinNo, uint8_t value){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
 800038c:	4613      	mov	r3, r2
 800038e:	70bb      	strb	r3, [r7, #2]
    if(value == LOGIC_LOW){
 8000390:	78bb      	ldrb	r3, [r7, #2]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <GPIO_write_pin+0x2c>
        CLR_BIT(GPIOx->ODR,pinNo);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	78fa      	ldrb	r2, [r7, #3]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	401a      	ands	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	60da      	str	r2, [r3, #12]
    }
    else if(value == LOGIC_HIGH){
        SET_BIT(GPIOx->ODR,pinNo);
    }
}
 80003aa:	e00b      	b.n	80003c4 <GPIO_write_pin+0x44>
    else if(value == LOGIC_HIGH){
 80003ac:	78bb      	ldrb	r3, [r7, #2]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d108      	bne.n	80003c4 <GPIO_write_pin+0x44>
        SET_BIT(GPIOx->ODR,pinNo);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	78fa      	ldrb	r2, [r7, #3]
 80003b8:	2101      	movs	r1, #1
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <USART_receive_callback>:
//#define MASTER_CODE
#define SLAVE_CODE

#define LAB2

void USART_receive_callback(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
    char ch = UART_receive_data(USART1,NO_POLL);
 80003d6:	2101      	movs	r1, #1
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <USART_receive_callback+0x3c>)
 80003da:	f000 fd75 	bl	8000ec8 <UART_receive_data>
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    GPIO_write_pin(GPIOA, PIN4, LOGIC_LOW); //write ss to low
 80003e2:	2200      	movs	r2, #0
 80003e4:	2104      	movs	r1, #4
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <USART_receive_callback+0x40>)
 80003e8:	f7ff ffca 	bl	8000380 <GPIO_write_pin>
    SPI_send_data(SPI1,ch,POLL);
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	2200      	movs	r2, #0
 80003f2:	4619      	mov	r1, r3
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <USART_receive_callback+0x44>)
 80003f6:	f000 fa85 	bl	8000904 <SPI_send_data>
    GPIO_write_pin(GPIOA, PIN4, LOGIC_HIGH); //write ss back to idle (high)
 80003fa:	2201      	movs	r2, #1
 80003fc:	2104      	movs	r1, #4
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <USART_receive_callback+0x40>)
 8000400:	f7ff ffbe 	bl	8000380 <GPIO_write_pin>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40013800 	.word	0x40013800
 8000410:	40010800 	.word	0x40010800
 8000414:	40013000 	.word	0x40013000

08000418 <SPI_receive_callback>:

void SPI_receive_callback(SPI_int_src* src){
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    if(src->RXNE){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00c      	beq.n	8000448 <SPI_receive_callback+0x30>
        char ch = SPI_receive_data(SPI1,NO_POLL);
 800042e:	2101      	movs	r1, #1
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <SPI_receive_callback+0x38>)
 8000432:	f000 fa85 	bl	8000940 <SPI_receive_data>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]
        UART_send_data(USART1,ch,NO_POLL);
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	b29b      	uxth	r3, r3
 800043e:	2201      	movs	r2, #1
 8000440:	4619      	mov	r1, r3
 8000442:	4804      	ldr	r0, [pc, #16]	; (8000454 <SPI_receive_callback+0x3c>)
 8000444:	f000 fd24 	bl	8000e90 <UART_send_data>
    }
}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40013000 	.word	0x40013000
 8000454:	40013800 	.word	0x40013800

08000458 <main>:



int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0


    #ifdef LAB2
    //usart configure
	UART_config_t USARTconf;
	USARTconf.sync_mode = SYNC_MODE;
 800045e:	2301      	movs	r3, #1
 8000460:	f887 3020 	strb.w	r3, [r7, #32]
    USARTconf.parity_mode = NO_PARITY;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    USARTconf.char_size = EIGHT_BIT_CHAR;
 800046a:	2300      	movs	r3, #0
 800046c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    USARTconf.num_stop_bits = ONE_STOP;
 8000470:	2300      	movs	r3, #0
 8000472:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    USARTconf.baud_rate = 115200;
 8000476:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800047a:	61fb      	str	r3, [r7, #28]
    USARTconf.enable_irq = RXNE_ENABLE;
 800047c:	2320      	movs	r3, #32
 800047e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    #ifdef MASTER_CODE
        USARTconf.enable_sel = ENABLE_RX;
    #endif
    #ifdef SLAVE_CODE
        USARTconf.enable_sel = ENABLE_TX;
 8000482:	2300      	movs	r3, #0
 8000484:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    #endif
    UART_init(USART1, &USARTconf);
 8000488:	f107 031c 	add.w	r3, r7, #28
 800048c:	4619      	mov	r1, r3
 800048e:	4813      	ldr	r0, [pc, #76]	; (80004dc <main+0x84>)
 8000490:	f000 faba 	bl	8000a08 <UART_init>
    UART_set_GPIO(USART1);
 8000494:	4811      	ldr	r0, [pc, #68]	; (80004dc <main+0x84>)
 8000496:	f000 fc5b 	bl	8000d50 <UART_set_GPIO>
    UART_set_callback(USART_receive_callback, USART1);
 800049a:	4910      	ldr	r1, [pc, #64]	; (80004dc <main+0x84>)
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <main+0x88>)
 800049e:	f000 fcbb 	bl	8000e18 <UART_set_callback>

    //SPI Configure
    SPI_config_t SPIconf;
    SPIconf.clk_phase = SPI_FIRST_EDGE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	81fb      	strh	r3, [r7, #14]
    SPIconf.clk_polarity = HIGH_LEVEL_IDLE;
 80004a6:	2302      	movs	r3, #2
 80004a8:	81bb      	strh	r3, [r7, #12]
    SPIconf.frame_format = SPI_MSB_FIRST;
 80004aa:	2300      	movs	r3, #0
 80004ac:	813b      	strh	r3, [r7, #8]
    SPIconf.frame_size = SPI_8_BIT_FRAME;
 80004ae:	2300      	movs	r3, #0
 80004b0:	817b      	strh	r3, [r7, #10]
    SPIconf.comm_mode = SPI_FULL_DUPLEX;
 80004b2:	2300      	movs	r3, #0
 80004b4:	80fb      	strh	r3, [r7, #6]
    SPIconf.baud_rate_prescaler = SPI_DIV_BY_8;
 80004b6:	2310      	movs	r3, #16
 80004b8:	827b      	strh	r3, [r7, #18]
        SPIconf.IRQ_enable = SPI_NO_INT_ENABLE;
        SPIconf.callback = 0;
    #endif

    #ifdef SLAVE_CODE
        SPIconf.master_slave_mode = SPI_SLAVE_MODE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	80bb      	strh	r3, [r7, #4]
        SPIconf.slave_select_mode = SPI_SS_HW_SLAVE;
 80004be:	2300      	movs	r3, #0
 80004c0:	823b      	strh	r3, [r7, #16]

        SPIconf.IRQ_enable = SPI_RXNE_INT_ENABLE;
 80004c2:	2340      	movs	r3, #64	; 0x40
 80004c4:	753b      	strb	r3, [r7, #20]
        SPIconf.callback = SPI_receive_callback;
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <main+0x8c>)
 80004c8:	61bb      	str	r3, [r7, #24]
    #endif    

    SPI_init(SPI1,&SPIconf);
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <main+0x90>)
 80004d0:	f000 f880 	bl	80005d4 <SPI_init>
    SPI_set_GPIO(SPI1);
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <main+0x90>)
 80004d6:	f000 f927 	bl	8000728 <SPI_set_GPIO>





	for(;;);
 80004da:	e7fe      	b.n	80004da <main+0x82>
 80004dc:	40013800 	.word	0x40013800
 80004e0:	080003d1 	.word	0x080003d1
 80004e4:	08000419 	.word	0x08000419
 80004e8:	40013000 	.word	0x40013000

080004ec <RCC_Get_SYSCLK_freq>:
#define APBconvertPreScaleBitsToShift(bits) ((bits) < 4 ? 0 : (bits) - 3)


const uint16_t AHBPreScales[16] = {1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 8, 16, 64, 128, 256, 512};

uint32_t RCC_Get_SYSCLK_freq(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  
	if((((RCC->CFGR) >> 2) & 0x3) == 0){ 
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <RCC_Get_SYSCLK_freq+0x20>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	089b      	lsrs	r3, r3, #2
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <RCC_Get_SYSCLK_freq+0x16>
        return HSI_CLK_FREQ;
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <RCC_Get_SYSCLK_freq+0x24>)
 8000500:	e000      	b.n	8000504 <RCC_Get_SYSCLK_freq+0x18>
    }

    //By default return
    return HSI_CLK_FREQ;
 8000502:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_Get_SYSCLK_freq+0x24>)
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	007a1200 	.word	0x007a1200

08000514 <RCC_Get_AHB_freq>:

uint32_t RCC_Get_AHB_freq(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 4) & 0xF;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <RCC_Get_AHB_freq+0x38>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	091b      	lsrs	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	71fb      	strb	r3, [r7, #7]
	uint8_t divisor = AHBPreScales[preScaleBits];
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4a09      	ldr	r2, [pc, #36]	; (8000550 <RCC_Get_AHB_freq+0x3c>)
 800052c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000530:	71bb      	strb	r3, [r7, #6]
    uint32_t res = RCC_Get_SYSCLK_freq() / divisor;
 8000532:	f7ff ffdb 	bl	80004ec <RCC_Get_SYSCLK_freq>
 8000536:	4602      	mov	r2, r0
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	fbb2 f3f3 	udiv	r3, r2, r3
 800053e:	603b      	str	r3, [r7, #0]
	return res;
 8000540:	683b      	ldr	r3, [r7, #0]

}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	08001054 	.word	0x08001054

08000554 <RCC_Get_APB1_freq>:



uint32_t RCC_Get_APB1_freq(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 8) & 0x7;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <RCC_Get_APB1_freq+0x3c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = APBconvertPreScaleBitsToShift(preScaleBits);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b03      	cmp	r3, #3
 800056c:	bf38      	it	cc
 800056e:	2303      	movcc	r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3b03      	subs	r3, #3
 8000574:	71bb      	strb	r3, [r7, #6]
    uint32_t res = RCC_Get_AHB_freq() >> shift;
 8000576:	f7ff ffcd 	bl	8000514 <RCC_Get_AHB_freq>
 800057a:	4602      	mov	r2, r0
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	fa22 f303 	lsr.w	r3, r2, r3
 8000582:	603b      	str	r3, [r7, #0]
	return res;
 8000584:	683b      	ldr	r3, [r7, #0]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <RCC_Get_APB2_freq>:


uint32_t RCC_Get_APB2_freq(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint8_t preScaleBits = ((RCC->CFGR) >> 11) & 0x7;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <RCC_Get_APB2_freq+0x3c>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	0adb      	lsrs	r3, r3, #11
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = APBconvertPreScaleBitsToShift(preScaleBits);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	bf38      	it	cc
 80005ae:	2303      	movcc	r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	3b03      	subs	r3, #3
 80005b4:	71bb      	strb	r3, [r7, #6]
    uint32_t res = RCC_Get_AHB_freq() >> shift;
 80005b6:	f7ff ffad 	bl	8000514 <RCC_Get_AHB_freq>
 80005ba:	4602      	mov	r2, r0
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	fa22 f303 	lsr.w	r3, r2, r3
 80005c2:	603b      	str	r3, [r7, #0]
	return res;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <SPI_init>:

void (* SPI1_callback)(SPI_int_src *);
void (* SPI2_callback)(SPI_int_src *);
SPI_config_t* g_config;

void SPI_init(SPI_t* spi ,SPI_config_t* conf){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
    uint16_t tmp_SPI_CR1_config = 0x0000;
 80005de:	2300      	movs	r3, #0
 80005e0:	81fb      	strh	r3, [r7, #14]
    uint16_t tmp_SPI_CR2_config = 0x0000;
 80005e2:	2300      	movs	r3, #0
 80005e4:	81bb      	strh	r3, [r7, #12]

    //Save Desired Config
    g_config = conf;
 80005e6:	4a49      	ldr	r2, [pc, #292]	; (800070c <SPI_init+0x138>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	6013      	str	r3, [r2, #0]

    //Enable the SPI
    if(spi == SPI1){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a48      	ldr	r2, [pc, #288]	; (8000710 <SPI_init+0x13c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <SPI_init+0x2e>
        CLK_ENABLE_SPI1();
 80005f4:	4b47      	ldr	r3, [pc, #284]	; (8000714 <SPI_init+0x140>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a46      	ldr	r2, [pc, #280]	; (8000714 <SPI_init+0x140>)
 80005fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	e009      	b.n	8000616 <SPI_init+0x42>
    }
    else if(spi == SPI2){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a44      	ldr	r2, [pc, #272]	; (8000718 <SPI_init+0x144>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d105      	bne.n	8000616 <SPI_init+0x42>
        CLK_ENABLE_SPI2();
 800060a:	4b42      	ldr	r3, [pc, #264]	; (8000714 <SPI_init+0x140>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a41      	ldr	r2, [pc, #260]	; (8000714 <SPI_init+0x140>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	61d3      	str	r3, [r2, #28]
    }
    tmp_SPI_CR1_config |= SPI_ENABLE;
 8000616:	89fb      	ldrh	r3, [r7, #14]
 8000618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800061c:	81fb      	strh	r3, [r7, #14]

    //Select Master or Slave
    tmp_SPI_CR1_config |= conf->master_slave_mode;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	89fb      	ldrh	r3, [r7, #14]
 8000624:	4313      	orrs	r3, r2
 8000626:	81fb      	strh	r3, [r7, #14]

    //Select Communication Mode
    tmp_SPI_CR1_config |= conf->comm_mode;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	885a      	ldrh	r2, [r3, #2]
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	4313      	orrs	r3, r2
 8000630:	81fb      	strh	r3, [r7, #14]

    //Select Starting Bit (LSB or MSB)
    tmp_SPI_CR1_config |= conf->frame_format;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	889a      	ldrh	r2, [r3, #4]
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	4313      	orrs	r3, r2
 800063a:	81fb      	strh	r3, [r7, #14]

    //Select Frame Size
    tmp_SPI_CR1_config |= conf->frame_size;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	88da      	ldrh	r2, [r3, #6]
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	4313      	orrs	r3, r2
 8000644:	81fb      	strh	r3, [r7, #14]

    //Select Clock Polarity
    tmp_SPI_CR1_config |= conf->clk_polarity;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	891a      	ldrh	r2, [r3, #8]
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4313      	orrs	r3, r2
 800064e:	81fb      	strh	r3, [r7, #14]

    //Select Clock Phase
    tmp_SPI_CR1_config |= conf->clk_phase;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	895a      	ldrh	r2, [r3, #10]
 8000654:	89fb      	ldrh	r3, [r7, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	81fb      	strh	r3, [r7, #14]

    //Select Slave Select Mode

    //SW Mode
    if(conf->slave_select_mode == SPI_SS_SW_MODE_HIGH || conf->slave_select_mode == SPI_SS_SW_MODE_LOW){
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	899b      	ldrh	r3, [r3, #12]
 800065e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000662:	d004      	beq.n	800066e <SPI_init+0x9a>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	899b      	ldrh	r3, [r3, #12]
 8000668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800066c:	d105      	bne.n	800067a <SPI_init+0xa6>
        tmp_SPI_CR1_config |= conf->slave_select_mode;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	899a      	ldrh	r2, [r3, #12]
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	4313      	orrs	r3, r2
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	e008      	b.n	800068c <SPI_init+0xb8>
    }
    //HW Mode
    else if(conf->slave_select_mode == SPI_SS_HW_MASTER_OUTPUT_ENABLED){
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d104      	bne.n	800068c <SPI_init+0xb8>
        tmp_SPI_CR2_config |= conf->slave_select_mode;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	899a      	ldrh	r2, [r3, #12]
 8000686:	89bb      	ldrh	r3, [r7, #12]
 8000688:	4313      	orrs	r3, r2
 800068a:	81bb      	strh	r3, [r7, #12]
    }

    //Select BR PreScaler
    tmp_SPI_CR1_config |= conf->baud_rate_prescaler;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	89da      	ldrh	r2, [r3, #14]
 8000690:	89fb      	ldrh	r3, [r7, #14]
 8000692:	4313      	orrs	r3, r2
 8000694:	81fb      	strh	r3, [r7, #14]

    //Interrupt Enabling
    tmp_SPI_CR2_config |= conf->IRQ_enable;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	7c1b      	ldrb	r3, [r3, #16]
 800069a:	b29a      	uxth	r2, r3
 800069c:	89bb      	ldrh	r3, [r7, #12]
 800069e:	4313      	orrs	r3, r2
 80006a0:	81bb      	strh	r3, [r7, #12]

    //set ISRs
    if(spi == SPI1){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <SPI_init+0x13c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d104      	bne.n	80006b4 <SPI_init+0xe0>
        SPI1_callback = conf->callback;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SPI_init+0x148>)
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e007      	b.n	80006c4 <SPI_init+0xf0>
    }
    else if(spi == SPI2){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <SPI_init+0x144>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d103      	bne.n	80006c4 <SPI_init+0xf0>
        SPI2_callback = conf->callback;;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <SPI_init+0x14c>)
 80006c2:	6013      	str	r3, [r2, #0]
    }

    //enable NVIC
    if(conf->IRQ_enable != SPI_NO_INT_ENABLE){
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	7c1b      	ldrb	r3, [r3, #16]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d014      	beq.n	80006f6 <SPI_init+0x122>
        if(spi == SPI1){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <SPI_init+0x13c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <SPI_init+0x10e>
            ENABLE_SPI1_IRQ();
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <SPI_init+0x150>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <SPI_init+0x150>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6053      	str	r3, [r2, #4]
 80006e0:	e009      	b.n	80006f6 <SPI_init+0x122>
        }
        else if(spi == SPI2){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <SPI_init+0x144>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d105      	bne.n	80006f6 <SPI_init+0x122>
            ENABLE_SPI2_IRQ();
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <SPI_init+0x150>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <SPI_init+0x150>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6053      	str	r3, [r2, #4]
        }        
    }


    //Copy Temp Configurations to physical register
    spi->CR1 = tmp_SPI_CR1_config;
 80006f6:	89fa      	ldrh	r2, [r7, #14]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
    spi->CR2 = tmp_SPI_CR2_config;                    
 80006fc:	89ba      	ldrh	r2, [r7, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	605a      	str	r2, [r3, #4]

}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000028 	.word	0x20000028
 8000710:	40013000 	.word	0x40013000
 8000714:	40021000 	.word	0x40021000
 8000718:	40003800 	.word	0x40003800
 800071c:	20000024 	.word	0x20000024
 8000720:	2000002c 	.word	0x2000002c
 8000724:	e000e100 	.word	0xe000e100

08000728 <SPI_set_GPIO>:
        RESET_SPI2();
        DISABLE_SPI2_IRQ();
    }
}

void SPI_set_GPIO(SPI_t* spi){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    GPIO_config_t conf;
    if(spi == SPI1){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a6f      	ldr	r2, [pc, #444]	; (80008f0 <SPI_set_GPIO+0x1c8>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d169      	bne.n	800080c <SPI_set_GPIO+0xe4>
        //set clock pin A5
        conf.pinNo = PIN5;
 8000738:	2305      	movs	r3, #5
 800073a:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 800073c:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d104      	bne.n	8000750 <SPI_set_GPIO+0x28>
            conf.pinMode = O_ALT_PUSH_PULL;
 8000746:	2302      	movs	r3, #2
 8000748:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;
 800074a:	2301      	movs	r3, #1
 800074c:	73bb      	strb	r3, [r7, #14]
 800074e:	e006      	b.n	800075e <SPI_set_GPIO+0x36>
        }
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <SPI_set_GPIO+0x36>
            conf.pinMode = I_FLOATING;        
 800075a:	2305      	movs	r3, #5
 800075c:	737b      	strb	r3, [r7, #13]
        }
        GPIO_init(GPIOA, &conf);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4864      	ldr	r0, [pc, #400]	; (80008f8 <SPI_set_GPIO+0x1d0>)
 8000766:	f7ff fd03 	bl	8000170 <GPIO_init>

        //Set MISO Pin A6 (Can only support Full Duplex point to point)
        conf.pinNo = PIN6;
 800076a:	2306      	movs	r3, #6
 800076c:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 800076e:	4b61      	ldr	r3, [pc, #388]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b04      	cmp	r3, #4
 8000776:	d102      	bne.n	800077e <SPI_set_GPIO+0x56>
            conf.pinMode = I_FLOATING;
 8000778:	2305      	movs	r3, #5
 800077a:	737b      	strb	r3, [r7, #13]
 800077c:	e008      	b.n	8000790 <SPI_set_GPIO+0x68>
        }
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 800077e:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <SPI_set_GPIO+0x68>
            conf.pinMode = O_ALT_PUSH_PULL;
 8000788:	2302      	movs	r3, #2
 800078a:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;        
 800078c:	2301      	movs	r3, #1
 800078e:	73bb      	strb	r3, [r7, #14]
        }
        GPIO_init(GPIOA, &conf);        
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4858      	ldr	r0, [pc, #352]	; (80008f8 <SPI_set_GPIO+0x1d0>)
 8000798:	f7ff fcea 	bl	8000170 <GPIO_init>

        //Set MOSI Pin A7 (Can only support Full Duplex)
        conf.pinNo = PIN7;
 800079c:	2307      	movs	r3, #7
 800079e:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 80007a0:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d104      	bne.n	80007b4 <SPI_set_GPIO+0x8c>
            conf.pinMode = O_ALT_PUSH_PULL;
 80007aa:	2302      	movs	r3, #2
 80007ac:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;       
 80007ae:	2301      	movs	r3, #1
 80007b0:	73bb      	strb	r3, [r7, #14]
 80007b2:	e006      	b.n	80007c2 <SPI_set_GPIO+0x9a>
        }
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 80007b4:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <SPI_set_GPIO+0x9a>
            conf.pinMode = I_FLOATING;       
 80007be:	2305      	movs	r3, #5
 80007c0:	737b      	strb	r3, [r7, #13]
        }
        GPIO_init(GPIOA, &conf);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	484b      	ldr	r0, [pc, #300]	; (80008f8 <SPI_set_GPIO+0x1d0>)
 80007ca:	f7ff fcd1 	bl	8000170 <GPIO_init>

        //set NSS Pin A4 (configure if HW mode selected)
        conf.pinNo = PIN4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	733b      	strb	r3, [r7, #12]
        if(g_config->slave_select_mode == SPI_SS_HW_SLAVE || g_config->slave_select_mode == SPI_SS_HW_MASTER_OUTPUT_DISABLED){
 80007d2:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d004      	beq.n	80007e6 <SPI_set_GPIO+0xbe>
 80007dc:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <SPI_set_GPIO+0xc4>
            conf.pinMode = I_FLOATING;              
 80007e6:	2305      	movs	r3, #5
 80007e8:	737b      	strb	r3, [r7, #13]
 80007ea:	e008      	b.n	80007fe <SPI_set_GPIO+0xd6>
        }
        else if(g_config->slave_select_mode == SPI_SS_HW_MASTER_OUTPUT_ENABLED){
 80007ec:	4b41      	ldr	r3, [pc, #260]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	899b      	ldrh	r3, [r3, #12]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d103      	bne.n	80007fe <SPI_set_GPIO+0xd6>
            conf.pinMode = O_ALT_PUSH_PULL;
 80007f6:	2302      	movs	r3, #2
 80007f8:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;             
 80007fa:	2301      	movs	r3, #1
 80007fc:	73bb      	strb	r3, [r7, #14]
        }
        GPIO_init(GPIOA, &conf);              
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	483c      	ldr	r0, [pc, #240]	; (80008f8 <SPI_set_GPIO+0x1d0>)
 8000806:	f7ff fcb3 	bl	8000170 <GPIO_init>
            conf.pinSpeed = MAX_10_MHZ;             
        }
        GPIO_init(GPIOB, &conf);        
    }

}
 800080a:	e06c      	b.n	80008e6 <SPI_set_GPIO+0x1be>
    else if(spi == SPI2){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <SPI_set_GPIO+0x1d4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d168      	bne.n	80008e6 <SPI_set_GPIO+0x1be>
        conf.pinNo = PIN13;
 8000814:	230d      	movs	r3, #13
 8000816:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d104      	bne.n	800082c <SPI_set_GPIO+0x104>
            conf.pinMode = O_ALT_PUSH_PULL;
 8000822:	2302      	movs	r3, #2
 8000824:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;
 8000826:	2301      	movs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	e006      	b.n	800083a <SPI_set_GPIO+0x112>
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <SPI_set_GPIO+0x112>
            conf.pinMode = I_FLOATING;        
 8000836:	2305      	movs	r3, #5
 8000838:	737b      	strb	r3, [r7, #13]
        GPIO_init(GPIOB, &conf);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	482f      	ldr	r0, [pc, #188]	; (8000900 <SPI_set_GPIO+0x1d8>)
 8000842:	f7ff fc95 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN14;
 8000846:	230e      	movs	r3, #14
 8000848:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d102      	bne.n	800085a <SPI_set_GPIO+0x132>
            conf.pinMode = I_FLOATING;
 8000854:	2305      	movs	r3, #5
 8000856:	737b      	strb	r3, [r7, #13]
 8000858:	e008      	b.n	800086c <SPI_set_GPIO+0x144>
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d103      	bne.n	800086c <SPI_set_GPIO+0x144>
            conf.pinMode = O_ALT_PUSH_PULL;
 8000864:	2302      	movs	r3, #2
 8000866:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;        
 8000868:	2301      	movs	r3, #1
 800086a:	73bb      	strb	r3, [r7, #14]
        GPIO_init(GPIOB, &conf);        
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4823      	ldr	r0, [pc, #140]	; (8000900 <SPI_set_GPIO+0x1d8>)
 8000874:	f7ff fc7c 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN15;
 8000878:	230f      	movs	r3, #15
 800087a:	733b      	strb	r3, [r7, #12]
        if(g_config->master_slave_mode == SPI_MASTER_MODE){
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d104      	bne.n	8000890 <SPI_set_GPIO+0x168>
            conf.pinMode = O_ALT_PUSH_PULL;
 8000886:	2302      	movs	r3, #2
 8000888:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;       
 800088a:	2301      	movs	r3, #1
 800088c:	73bb      	strb	r3, [r7, #14]
 800088e:	e006      	b.n	800089e <SPI_set_GPIO+0x176>
        else if(g_config->master_slave_mode == SPI_SLAVE_MODE){
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <SPI_set_GPIO+0x176>
            conf.pinMode = I_FLOATING;       
 800089a:	2305      	movs	r3, #5
 800089c:	737b      	strb	r3, [r7, #13]
        GPIO_init(GPIOB, &conf);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4816      	ldr	r0, [pc, #88]	; (8000900 <SPI_set_GPIO+0x1d8>)
 80008a6:	f7ff fc63 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN12;
 80008aa:	230c      	movs	r3, #12
 80008ac:	733b      	strb	r3, [r7, #12]
        if(g_config->slave_select_mode == SPI_SS_HW_SLAVE || g_config->slave_select_mode == SPI_SS_HW_MASTER_OUTPUT_DISABLED){
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	899b      	ldrh	r3, [r3, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d004      	beq.n	80008c2 <SPI_set_GPIO+0x19a>
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	899b      	ldrh	r3, [r3, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <SPI_set_GPIO+0x1a0>
            conf.pinMode = I_FLOATING;              
 80008c2:	2305      	movs	r3, #5
 80008c4:	737b      	strb	r3, [r7, #13]
 80008c6:	e008      	b.n	80008da <SPI_set_GPIO+0x1b2>
        else if(g_config->slave_select_mode == SPI_SS_HW_MASTER_OUTPUT_ENABLED){
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <SPI_set_GPIO+0x1cc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	899b      	ldrh	r3, [r3, #12]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d103      	bne.n	80008da <SPI_set_GPIO+0x1b2>
            conf.pinMode = O_ALT_PUSH_PULL;
 80008d2:	2302      	movs	r3, #2
 80008d4:	737b      	strb	r3, [r7, #13]
            conf.pinSpeed = MAX_10_MHZ;             
 80008d6:	2301      	movs	r3, #1
 80008d8:	73bb      	strb	r3, [r7, #14]
        GPIO_init(GPIOB, &conf);        
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <SPI_set_GPIO+0x1d8>)
 80008e2:	f7ff fc45 	bl	8000170 <GPIO_init>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40013000 	.word	0x40013000
 80008f4:	20000028 	.word	0x20000028
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40003800 	.word	0x40003800
 8000900:	40010c00 	.word	0x40010c00

08000904 <SPI_send_data>:


void SPI_send_data(SPI_t* spi, uint16_t data,poll_mode poll_choice){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
 8000910:	4613      	mov	r3, r2
 8000912:	707b      	strb	r3, [r7, #1]
    if(poll_choice == POLL){
 8000914:	787b      	ldrb	r3, [r7, #1]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <SPI_send_data+0x2c>
        while(GET_BIT(spi->SR,1) == 0);
 800091a:	bf00      	nop
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f8      	beq.n	800091c <SPI_send_data+0x18>
        spi->DR = data;
 800092a:	887a      	ldrh	r2, [r7, #2]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60da      	str	r2, [r3, #12]
    }
    spi->DR = data;          
 8000930:	887a      	ldrh	r2, [r7, #2]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60da      	str	r2, [r3, #12]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SPI_receive_data>:

uint16_t SPI_receive_data(SPI_t* spi, poll_mode poll_choice){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
    if(poll_choice == POLL){
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10a      	bne.n	8000968 <SPI_receive_data+0x28>
        while(GET_BIT(spi->SR,0) == 0);
 8000952:	bf00      	nop
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <SPI_receive_data+0x14>
        return spi->DR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	b29b      	uxth	r3, r3
 8000966:	e002      	b.n	800096e <SPI_receive_data+0x2e>
    }
    return spi->DR;           
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	b29b      	uxth	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <SPI1_IRQHandler>:
    SPI_send_data(spi,data,poll_choice);
    return SPI_receive_data(spi,poll_choice);
}

//ISRs
void SPI1_IRQHandler(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
    SPI_int_src src;
    if(SPI1->SR & 0x2){ //TXE
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <SPI1_IRQHandler+0x40>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <SPI1_IRQHandler+0x1a>
        src.TXE = 1;
 800098a:	793b      	ldrb	r3, [r7, #4]
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	713b      	strb	r3, [r7, #4]
    }
    if(SPI1->SR & 0x1){ //RXNE
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <SPI1_IRQHandler+0x40>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <SPI1_IRQHandler+0x2e>
        src.RXNE = 1;
 800099e:	793b      	ldrb	r3, [r7, #4]
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	713b      	strb	r3, [r7, #4]
    }
    SPI1_callback(&src);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SPI1_IRQHandler+0x44>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	1d3a      	adds	r2, r7, #4
 80009ac:	4610      	mov	r0, r2
 80009ae:	4798      	blx	r3

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013000 	.word	0x40013000
 80009bc:	20000024 	.word	0x20000024

080009c0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
    SPI_int_src src;
    if(SPI2->SR & 0x2){ //TXE
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <SPI2_IRQHandler+0x40>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <SPI2_IRQHandler+0x1a>
        src.TXE = 1;
 80009d2:	793b      	ldrb	r3, [r7, #4]
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	713b      	strb	r3, [r7, #4]
    }
    if(SPI2->SR & 0x1){ //RXNE
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <SPI2_IRQHandler+0x40>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <SPI2_IRQHandler+0x2e>
        src.RXNE = 1;
 80009e6:	793b      	ldrb	r3, [r7, #4]
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	713b      	strb	r3, [r7, #4]
    }
    SPI2_callback(&src);    
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SPI2_IRQHandler+0x44>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1d3a      	adds	r2, r7, #4
 80009f4:	4610      	mov	r0, r2
 80009f6:	4798      	blx	r3
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40003800 	.word	0x40003800
 8000a04:	2000002c 	.word	0x2000002c

08000a08 <UART_init>:

void (*USART_callbacks[5]) (void);
static uint8_t payload_length = -1;
static uint8_t isParityEnabled = 0;

void UART_init(USART_t* usart ,UART_config_t* config){
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]


	uint8_t usart_no = getUsartNo(usart);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a95      	ldr	r2, [pc, #596]	; (8000c6c <UART_init+0x264>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d019      	beq.n	8000a4e <UART_init+0x46>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <UART_init+0x268>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <UART_init+0x42>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a93      	ldr	r2, [pc, #588]	; (8000c74 <UART_init+0x26c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <UART_init+0x3e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <UART_init+0x270>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <UART_init+0x3a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a91      	ldr	r2, [pc, #580]	; (8000c7c <UART_init+0x274>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <UART_init+0x36>
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	e008      	b.n	8000a50 <UART_init+0x48>
 8000a3e:	23ff      	movs	r3, #255	; 0xff
 8000a40:	e006      	b.n	8000a50 <UART_init+0x48>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e004      	b.n	8000a50 <UART_init+0x48>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e002      	b.n	8000a50 <UART_init+0x48>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e000      	b.n	8000a50 <UART_init+0x48>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	753b      	strb	r3, [r7, #20]
	ENABLE_USART(usart_no);
 8000a52:	7d3b      	ldrb	r3, [r7, #20]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <UART_init+0x5e>
 8000a58:	4b89      	ldr	r3, [pc, #548]	; (8000c80 <UART_init+0x278>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a88      	ldr	r2, [pc, #544]	; (8000c80 <UART_init+0x278>)
 8000a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	e010      	b.n	8000a88 <UART_init+0x80>
 8000a66:	7d3b      	ldrb	r3, [r7, #20]
 8000a68:	2b05      	cmp	r3, #5
 8000a6a:	d80d      	bhi.n	8000a88 <UART_init+0x80>
 8000a6c:	7d3b      	ldrb	r3, [r7, #20]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d90a      	bls.n	8000a88 <UART_init+0x80>
 8000a72:	4b83      	ldr	r3, [pc, #524]	; (8000c80 <UART_init+0x278>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	7d3a      	ldrb	r2, [r7, #20]
 8000a78:	320f      	adds	r2, #15
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a7f      	ldr	r2, [pc, #508]	; (8000c80 <UART_init+0x278>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	61d3      	str	r3, [r2, #28]


	//enable the UART
	SET_BIT(usart->CR1,13);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]


	//set character size
	payload_length = config->char_size;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	79da      	ldrb	r2, [r3, #7]
 8000a98:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <UART_init+0x27c>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	if(config->char_size == EIGHT_BIT_CHAR){
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	79db      	ldrb	r3, [r3, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d106      	bne.n	8000ab2 <UART_init+0xaa>
		CLR_BIT(usart->CR1,12);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	e009      	b.n	8000ac6 <UART_init+0xbe>
	}
	else if(config->char_size == NINE_BIT_CHAR){
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	79db      	ldrb	r3, [r3, #7]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d105      	bne.n	8000ac6 <UART_init+0xbe>
		SET_BIT(usart->CR1,12);		
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60da      	str	r2, [r3, #12]
	}

	//set stop bits number
	CLR_BIT(usart->CR2,12);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	611a      	str	r2, [r3, #16]
	CLR_BIT(usart->CR2,13);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	611a      	str	r2, [r3, #16]
	(usart->CR2) |= (config->num_stop_bits);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	7992      	ldrb	r2, [r2, #6]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	611a      	str	r2, [r3, #16]

    //set parity
    if(config->parity_mode != NO_PARITY){
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <UART_init+0xf4>
    	isParityEnabled = 1;
 8000af4:	4b64      	ldr	r3, [pc, #400]	; (8000c88 <UART_init+0x280>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e002      	b.n	8000b02 <UART_init+0xfa>
    }
    else{
    	isParityEnabled = 0;
 8000afc:	4b62      	ldr	r3, [pc, #392]	; (8000c88 <UART_init+0x280>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
    }
	CLR_BIT(usart->CR1,10);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60da      	str	r2, [r3, #12]
	CLR_BIT(usart->CR1,9);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60da      	str	r2, [r3, #12]

	(usart->CR1) |= ((config->parity_mode) << 9);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	7952      	ldrb	r2, [r2, #5]
 8000b22:	0252      	lsls	r2, r2, #9
 8000b24:	431a      	orrs	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60da      	str	r2, [r3, #12]

	//select baud rate
	uint16_t int_part;
	uint8_t  fraction_part;
	if(usart == USART1){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a4f      	ldr	r2, [pc, #316]	; (8000c6c <UART_init+0x264>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d126      	bne.n	8000b80 <UART_init+0x178>
		uint32_t APB2_freq = RCC_Get_APB2_freq();
 8000b32:	f7ff fd2f 	bl	8000594 <RCC_Get_APB2_freq>
 8000b36:	60f8      	str	r0, [r7, #12]
		int_part = INTEGER_PART(APB2_freq,config->baud_rate);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	82fb      	strh	r3, [r7, #22]
		fraction_part = FRACTIONAL_PART(APB2_freq,config->baud_rate);
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009a      	lsls	r2, r3, #2
 8000b50:	441a      	add	r2, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b68:	2164      	movs	r1, #100	; 0x64
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	3332      	adds	r3, #50	; 0x32
 8000b74:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <UART_init+0x284>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	757b      	strb	r3, [r7, #21]
 8000b7e:	e025      	b.n	8000bcc <UART_init+0x1c4>
	}
	else{
		uint32_t APB1_freq = RCC_Get_APB1_freq();
 8000b80:	f7ff fce8 	bl	8000554 <RCC_Get_APB1_freq>
 8000b84:	6138      	str	r0, [r7, #16]
		int_part = INTEGER_PART(APB1_freq,config->baud_rate);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	011b      	lsls	r3, r3, #4
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	82fb      	strh	r3, [r7, #22]
		fraction_part = FRACTIONAL_PART(APB1_freq,config->baud_rate);
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009a      	lsls	r2, r3, #2
 8000b9e:	441a      	add	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	6939      	ldr	r1, [r7, #16]
 8000bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb6:	2164      	movs	r1, #100	; 0x64
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	3332      	adds	r3, #50	; 0x32
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <UART_init+0x284>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	095b      	lsrs	r3, r3, #5
 8000bca:	757b      	strb	r3, [r7, #21]
	}

	if(fraction_part == 0x10){ //overflow of fractional part
 8000bcc:	7d7b      	ldrb	r3, [r7, #21]
 8000bce:	2b10      	cmp	r3, #16
 8000bd0:	d102      	bne.n	8000bd8 <UART_init+0x1d0>
		int_part++;
 8000bd2:	8afb      	ldrh	r3, [r7, #22]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	82fb      	strh	r3, [r7, #22]
	}
	usart->BRR = 0; //clear before modification
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
	usart->BRR = (int_part << 4) | (fraction_part & 0xF);
 8000bde:	8afb      	ldrh	r3, [r7, #22]
 8000be0:	011a      	lsls	r2, r3, #4
 8000be2:	7d7b      	ldrb	r3, [r7, #21]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	4313      	orrs	r3, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]

    //enable/disable selected TX and RX
	switch(config->enable_sel){
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	7a1b      	ldrb	r3, [r3, #8]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d858      	bhi.n	8000caa <UART_init+0x2a2>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <UART_init+0x1f8>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c27 	.word	0x08000c27
 8000c08:	08000c35 	.word	0x08000c35
 8000c0c:	08000c4f 	.word	0x08000c4f
 8000c10:	08000c5d 	.word	0x08000c5d
 8000c14:	08000c91 	.word	0x08000c91
		case ENABLE_TX:
		{
			SET_BIT(usart->CR1, 3);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f043 0208 	orr.w	r2, r3, #8
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000c24:	e041      	b.n	8000caa <UART_init+0x2a2>
		case ENABLE_RX:
		{
			SET_BIT(usart->CR1, 2);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	f043 0204 	orr.w	r2, r3, #4
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000c32:	e03a      	b.n	8000caa <UART_init+0x2a2>
		case ENABLE_RX_TX:
		{
			SET_BIT(usart->CR1, 2);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f043 0204 	orr.w	r2, r3, #4
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
			SET_BIT(usart->CR1, 3);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f043 0208 	orr.w	r2, r3, #8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000c4c:	e02d      	b.n	8000caa <UART_init+0x2a2>
		case DISABLE_TX:
		{
			CLR_BIT(usart->CR1, 3);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f023 0208 	bic.w	r2, r3, #8
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000c5a:	e026      	b.n	8000caa <UART_init+0x2a2>
		case DISABLE_RX:
		{
			CLR_BIT(usart->CR1, 2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	f023 0204 	bic.w	r2, r3, #4
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	60da      	str	r2, [r3, #12]
		} 
		break;
 8000c68:	e01f      	b.n	8000caa <UART_init+0x2a2>
 8000c6a:	bf00      	nop
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40004c00 	.word	0x40004c00
 8000c7c:	40005000 	.word	0x40005000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	51eb851f 	.word	0x51eb851f
		case DISABLE_RX_TX:
		{
			CLR_BIT(usart->CR1, 2);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f023 0204 	bic.w	r2, r3, #4
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60da      	str	r2, [r3, #12]
			CLR_BIT(usart->CR1, 3);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f023 0208 	bic.w	r2, r3, #8
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60da      	str	r2, [r3, #12]
		} 
		break;		
 8000ca8:	bf00      	nop
	}

    //Enable/Disable selected interrupt
    uint8_t irq = getUsartIRQ(usart);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <UART_init+0x330>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d019      	beq.n	8000ce6 <UART_init+0x2de>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <UART_init+0x334>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <UART_init+0x2da>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <UART_init+0x338>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <UART_init+0x2d6>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <UART_init+0x33c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <UART_init+0x2d2>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <UART_init+0x340>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <UART_init+0x2ce>
 8000cd2:	2335      	movs	r3, #53	; 0x35
 8000cd4:	e008      	b.n	8000ce8 <UART_init+0x2e0>
 8000cd6:	23ff      	movs	r3, #255	; 0xff
 8000cd8:	e006      	b.n	8000ce8 <UART_init+0x2e0>
 8000cda:	2334      	movs	r3, #52	; 0x34
 8000cdc:	e004      	b.n	8000ce8 <UART_init+0x2e0>
 8000cde:	2327      	movs	r3, #39	; 0x27
 8000ce0:	e002      	b.n	8000ce8 <UART_init+0x2e0>
 8000ce2:	2326      	movs	r3, #38	; 0x26
 8000ce4:	e000      	b.n	8000ce8 <UART_init+0x2e0>
 8000ce6:	2325      	movs	r3, #37	; 0x25
 8000ce8:	72fb      	strb	r3, [r7, #11]
	if(config->enable_irq <= TXE_ENABLE && config->enable_irq >= RXNE_ENABLE){
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	2b80      	cmp	r3, #128	; 0x80
 8000cf0:	d81d      	bhi.n	8000d2e <UART_init+0x326>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	7a5b      	ldrb	r3, [r3, #9]
 8000cf6:	2b1f      	cmp	r3, #31
 8000cf8:	d919      	bls.n	8000d2e <UART_init+0x326>
		(usart->CR1) |= (config->enable_irq);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	7a52      	ldrb	r2, [r2, #9]
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60da      	str	r2, [r3, #12]
		SET_BIT(NVIC->ISER[irq / 32],irq % 32);
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <UART_init+0x344>)
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	4603      	mov	r3, r0
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	7afa      	ldrb	r2, [r7, #11]
 8000d18:	f002 021f 	and.w	r2, r2, #31
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	4614      	mov	r4, r2
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <UART_init+0x344>)
 8000d26:	4601      	mov	r1, r0
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	else if(config->enable_irq <= RXNE_DISABLE && config->enable_irq >= TXE_DISABLE){
		(usart->CR1) &= (config->enable_irq);
		SET_BIT(NVIC->ICER[irq / 32],irq % 32);
	}

}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40004800 	.word	0x40004800
 8000d44:	40004c00 	.word	0x40004c00
 8000d48:	40005000 	.word	0x40005000
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <UART_set_GPIO>:

void UART_set_GPIO(USART_t* usart){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    GPIO_config_t conf;
    if(usart == USART1){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <UART_set_GPIO+0xb0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d116      	bne.n	8000d8e <UART_set_GPIO+0x3e>
        //TX on Pin B6
        conf.pinNo = PIN6; 
 8000d60:	2306      	movs	r3, #6
 8000d62:	733b      	strb	r3, [r7, #12]
        conf.pinMode = O_ALT_PUSH_PULL;
 8000d64:	2302      	movs	r3, #2
 8000d66:	737b      	strb	r3, [r7, #13]
        conf.pinSpeed = MAX_10_MHZ;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73bb      	strb	r3, [r7, #14]
        GPIO_init(GPIOB, &conf);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <UART_set_GPIO+0xb4>)
 8000d74:	f7ff f9fc 	bl	8000170 <GPIO_init>

        //RX on B7
        conf.pinNo = PIN7; 
 8000d78:	2307      	movs	r3, #7
 8000d7a:	733b      	strb	r3, [r7, #12]
        conf.pinMode = I_FLOATING;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	737b      	strb	r3, [r7, #13]
        GPIO_init(GPIOB, &conf);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <UART_set_GPIO+0xb4>)
 8000d88:	f7ff f9f2 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN11; 
        conf.pinMode = I_FLOATING;
        GPIO_init(GPIOC, &conf);        
    }

}
 8000d8c:	e034      	b.n	8000df8 <UART_set_GPIO+0xa8>
    else if(usart == USART2){
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <UART_set_GPIO+0xb8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d116      	bne.n	8000dc4 <UART_set_GPIO+0x74>
        conf.pinNo = PIN5; 
 8000d96:	2305      	movs	r3, #5
 8000d98:	733b      	strb	r3, [r7, #12]
        conf.pinMode = O_ALT_PUSH_PULL;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	737b      	strb	r3, [r7, #13]
        conf.pinSpeed = MAX_10_MHZ;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73bb      	strb	r3, [r7, #14]
        GPIO_init(GPIOD, &conf);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <UART_set_GPIO+0xbc>)
 8000daa:	f7ff f9e1 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN6; 
 8000dae:	2306      	movs	r3, #6
 8000db0:	733b      	strb	r3, [r7, #12]
        conf.pinMode = I_FLOATING;
 8000db2:	2305      	movs	r3, #5
 8000db4:	737b      	strb	r3, [r7, #13]
        GPIO_init(GPIOD, &conf);        
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <UART_set_GPIO+0xbc>)
 8000dbe:	f7ff f9d7 	bl	8000170 <GPIO_init>
}
 8000dc2:	e019      	b.n	8000df8 <UART_set_GPIO+0xa8>
    else if(usart == USART3){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <UART_set_GPIO+0xc0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d115      	bne.n	8000df8 <UART_set_GPIO+0xa8>
        conf.pinNo = PIN10; 
 8000dcc:	230a      	movs	r3, #10
 8000dce:	733b      	strb	r3, [r7, #12]
        conf.pinMode = O_ALT_PUSH_PULL;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	737b      	strb	r3, [r7, #13]
        conf.pinSpeed = MAX_10_MHZ;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73bb      	strb	r3, [r7, #14]
        GPIO_init(GPIOC, &conf);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <UART_set_GPIO+0xc4>)
 8000de0:	f7ff f9c6 	bl	8000170 <GPIO_init>
        conf.pinNo = PIN11; 
 8000de4:	230b      	movs	r3, #11
 8000de6:	733b      	strb	r3, [r7, #12]
        conf.pinMode = I_FLOATING;
 8000de8:	2305      	movs	r3, #5
 8000dea:	737b      	strb	r3, [r7, #13]
        GPIO_init(GPIOC, &conf);        
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <UART_set_GPIO+0xc4>)
 8000df4:	f7ff f9bc 	bl	8000170 <GPIO_init>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40004400 	.word	0x40004400
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40011000 	.word	0x40011000

08000e18 <UART_set_callback>:

void UART_set_callback(void (*func)(void),USART_t* usart){
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    uint8_t usartNo = getUsartNo(usart);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <UART_set_callback+0x60>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d019      	beq.n	8000e5e <UART_set_callback+0x46>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <UART_set_callback+0x64>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <UART_set_callback+0x42>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <UART_set_callback+0x68>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <UART_set_callback+0x3e>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <UART_set_callback+0x6c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d007      	beq.n	8000e52 <UART_set_callback+0x3a>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <UART_set_callback+0x70>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <UART_set_callback+0x36>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e008      	b.n	8000e60 <UART_set_callback+0x48>
 8000e4e:	23ff      	movs	r3, #255	; 0xff
 8000e50:	e006      	b.n	8000e60 <UART_set_callback+0x48>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e004      	b.n	8000e60 <UART_set_callback+0x48>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e002      	b.n	8000e60 <UART_set_callback+0x48>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e000      	b.n	8000e60 <UART_set_callback+0x48>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	USART_callbacks[usartNo-1] = func;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <UART_set_callback+0x74>)
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40004800 	.word	0x40004800
 8000e84:	40004c00 	.word	0x40004c00
 8000e88:	40005000 	.word	0x40005000
 8000e8c:	20000030 	.word	0x20000030

08000e90 <UART_send_data>:



void UART_send_data(USART_t* usart, uint16_t data, uint8_t poll){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
	if(poll != USART_NO_POLL){
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <UART_send_data+0x26>
		while(GET_BIT(usart->SR,7) == 0);
 8000ea6:	bf00      	nop
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	09db      	lsrs	r3, r3, #7
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f8      	beq.n	8000ea8 <UART_send_data+0x18>
	}
	usart->DR = data;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	605a      	str	r2, [r3, #4]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <UART_receive_data>:
uint16_t UART_receive_data(USART_t* usart, uint8_t poll){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
	if(poll != USART_NO_POLL){
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <UART_receive_data+0x22>
		while(GET_BIT(usart->SR,5) == 0);
 8000eda:	bf00      	nop
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f8      	beq.n	8000edc <UART_receive_data+0x14>
	}	
	if(isParityEnabled){
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <UART_receive_data+0x6c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d017      	beq.n	8000f22 <UART_receive_data+0x5a>
		if(payload_length == EIGHT_BIT_CHAR){
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <UART_receive_data+0x70>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <UART_receive_data+0x40>
			return (usart->DR) & 0x7F;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	e00f      	b.n	8000f28 <UART_receive_data+0x60>
		}
		else if(payload_length == NINE_BIT_CHAR){
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <UART_receive_data+0x70>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <UART_receive_data+0x54>
			return (usart->DR) & 0xFF;		
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	e005      	b.n	8000f28 <UART_receive_data+0x60>
		}
		else{
			return -1;
 8000f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f20:	e002      	b.n	8000f28 <UART_receive_data+0x60>
		}
	}
	else{
		return usart->DR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b29b      	uxth	r3, r3
	}


}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000020 	.word	0x20000020
 8000f38:	20000000 	.word	0x20000000

08000f3c <USART1_IRQHandler>:




void USART1_IRQHandler(){ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	USART_callbacks[0]();
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <USART1_IRQHandler+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4798      	blx	r3
}  
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000030 	.word	0x20000030

08000f50 <USART2_IRQHandler>:

void USART2_IRQHandler(){ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	USART_callbacks[1]();
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <USART2_IRQHandler+0x10>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4798      	blx	r3
}  
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000030 	.word	0x20000030

08000f64 <USART3_IRQHandler>:

void USART3_IRQHandler(){ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	USART_callbacks[2]();
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <USART3_IRQHandler+0x10>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4798      	blx	r3
}  
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000030 	.word	0x20000030

08000f78 <UART4_IRQHandler>:

void UART4_IRQHandler(){ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	USART_callbacks[3]();
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <UART4_IRQHandler+0x10>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4798      	blx	r3
}  
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000030 	.word	0x20000030

08000f8c <UART5_IRQHandler>:

void UART5_IRQHandler(){ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	USART_callbacks[4]();
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <UART5_IRQHandler+0x10>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4798      	blx	r3
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000030 	.word	0x20000030

08000fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fce:	f000 f811 	bl	8000ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff fa41 	bl	8000458 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fe4:	0800107c 	.word	0x0800107c
  ldr r2, =_sbss
 8000fe8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fec:	20000044 	.word	0x20000044

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <__libc_init_array>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4e0c      	ldr	r6, [pc, #48]	; (800102c <__libc_init_array+0x38>)
 8000ffa:	4c0d      	ldr	r4, [pc, #52]	; (8001030 <__libc_init_array+0x3c>)
 8000ffc:	1ba4      	subs	r4, r4, r6
 8000ffe:	10a4      	asrs	r4, r4, #2
 8001000:	42a5      	cmp	r5, r4
 8001002:	d109      	bne.n	8001018 <__libc_init_array+0x24>
 8001004:	f000 f81a 	bl	800103c <_init>
 8001008:	2500      	movs	r5, #0
 800100a:	4e0a      	ldr	r6, [pc, #40]	; (8001034 <__libc_init_array+0x40>)
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <__libc_init_array+0x44>)
 800100e:	1ba4      	subs	r4, r4, r6
 8001010:	10a4      	asrs	r4, r4, #2
 8001012:	42a5      	cmp	r5, r4
 8001014:	d105      	bne.n	8001022 <__libc_init_array+0x2e>
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101c:	4798      	blx	r3
 800101e:	3501      	adds	r5, #1
 8001020:	e7ee      	b.n	8001000 <__libc_init_array+0xc>
 8001022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001026:	4798      	blx	r3
 8001028:	3501      	adds	r5, #1
 800102a:	e7f2      	b.n	8001012 <__libc_init_array+0x1e>
 800102c:	08001074 	.word	0x08001074
 8001030:	08001074 	.word	0x08001074
 8001034:	08001074 	.word	0x08001074
 8001038:	08001078 	.word	0x08001078

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
