
UART_Section_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f5  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include "uart.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	UART_config_t conf = {ASYNC_MODE, NO_PARITY, ONE_STOP, 8, 9600};
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
	UART_init(&conf);
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 62 00 	call	0xc4	; 0xc4 <UART_init>
	
	UART_send_string("ABCDEFG");
  ba:	86 e6       	ldi	r24, 0x66	; 102
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_send_string>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x30>

000000c4 <UART_init>:

uint16_t UART_receive(void){
	while(GET_BIT(UCSRA,7) == 0); //wait till buffer is full
	uint8_t ninth_bit = GET_BIT(UCSRB,1);
	return (ninth_bit << 8) | UDR;
}
  c4:	fc 01       	movw	r30, r24
  c6:	80 b5       	in	r24, 0x20	; 32
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 bd       	out	0x20, r24	; 32
  cc:	80 81       	ld	r24, Z
  ce:	81 11       	cpse	r24, r1
  d0:	04 c0       	rjmp	.+8      	; 0xda <UART_init+0x16>
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	80 bd       	out	0x20, r24	; 32
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <UART_init+0x20>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	19 f4       	brne	.+6      	; 0xe4 <UART_init+0x20>
  de:	80 b5       	in	r24, 0x20	; 32
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 bd       	out	0x20, r24	; 32
  e4:	80 b5       	in	r24, 0x20	; 32
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	8f 7e       	andi	r24, 0xEF	; 239
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	20 b5       	in	r18, 0x20	; 32
  f2:	91 81       	ldd	r25, Z+1	; 0x01
  f4:	30 e1       	ldi	r19, 0x10	; 16
  f6:	93 9f       	mul	r25, r19
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	82 2b       	or	r24, r18
  fe:	80 bd       	out	0x20, r24	; 32
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	81 11       	cpse	r24, r1
 104:	04 c0       	rjmp	.+8      	; 0x10e <UART_init+0x4a>
 106:	80 b5       	in	r24, 0x20	; 32
 108:	87 7f       	andi	r24, 0xF7	; 247
 10a:	80 bd       	out	0x20, r24	; 32
 10c:	05 c0       	rjmp	.+10     	; 0x118 <UART_init+0x54>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	19 f4       	brne	.+6      	; 0x118 <UART_init+0x54>
 112:	80 b5       	in	r24, 0x20	; 32
 114:	88 60       	ori	r24, 0x08	; 8
 116:	80 bd       	out	0x20, r24	; 32
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 bd       	out	0x20, r24	; 32
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	80 bd       	out	0x20, r24	; 32
 124:	93 81       	ldd	r25, Z+3	; 0x03
 126:	8b ef       	ldi	r24, 0xFB	; 251
 128:	89 0f       	add	r24, r25
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	50 f4       	brcc	.+20     	; 0x142 <UART_init+0x7e>
 12e:	80 b5       	in	r24, 0x20	; 32
 130:	29 2f       	mov	r18, r25
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	25 50       	subi	r18, 0x05	; 5
 136:	31 09       	sbc	r19, r1
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	28 2b       	or	r18, r24
 13e:	20 bd       	out	0x20, r18	; 32
 140:	15 c0       	rjmp	.+42     	; 0x16c <UART_init+0xa8>
 142:	99 30       	cpi	r25, 0x09	; 9
 144:	69 f4       	brne	.+26     	; 0x160 <UART_init+0x9c>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 14c:	80 b5       	in	r24, 0x20	; 32
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	80 bd       	out	0x20, r24	; 32
 152:	80 b5       	in	r24, 0x20	; 32
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 bd       	out	0x20, r24	; 32
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	06 c0       	rjmp	.+12     	; 0x16c <UART_init+0xa8>
 160:	80 b5       	in	r24, 0x20	; 32
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 bd       	out	0x20, r24	; 32
 166:	80 b5       	in	r24, 0x20	; 32
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 bd       	out	0x20, r24	; 32
 16c:	24 81       	ldd	r18, Z+4	; 0x04
 16e:	35 81       	ldd	r19, Z+5	; 0x05
 170:	c9 01       	movw	r24, r18
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	aa 1f       	adc	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	9c 01       	movw	r18, r24
 188:	ad 01       	movw	r20, r26
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	44 1f       	adc	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	44 1f       	adc	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	72 e1       	ldi	r23, 0x12	; 18
 19e:	8a e7       	ldi	r24, 0x7A	; 122
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__udivmodsi4>
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	31 09       	sbc	r19, r1
 1aa:	29 b9       	out	0x09, r18	; 9
 1ac:	80 b5       	in	r24, 0x20	; 32
 1ae:	8f 77       	andi	r24, 0x7F	; 127
 1b0:	80 bd       	out	0x20, r24	; 32
 1b2:	10 bc       	out	0x20, r1	; 32
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	8a b9       	out	0x0a, r24	; 10
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8a b9       	out	0x0a, r24	; 10
 1c0:	08 95       	ret

000001c2 <UART_send>:
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <UART_send>
 1c6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__data_end>
 1ca:	99 23       	and	r25, r25
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <UART_send+0x12>
 1ce:	9a b1       	in	r25, 0x0a	; 10
 1d0:	9e 7f       	andi	r25, 0xFE	; 254
 1d2:	9a b9       	out	0x0a, r25	; 10
 1d4:	8c b9       	out	0x0c, r24	; 12
 1d6:	08 95       	ret

000001d8 <UART_send_string>:

void UART_send_string(uint8_t* str){
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <UART_send_string+0x10>
		UART_send(*str);
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART_send>
		str++;
 1e6:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ninth_bit = GET_BIT(UCSRB,1);
	return (ninth_bit << 8) | UDR;
}

void UART_send_string(uint8_t* str){
	while(*str != '\0'){
 1e8:	88 81       	ld	r24, Y
 1ea:	81 11       	cpse	r24, r1
 1ec:	f9 cf       	rjmp	.-14     	; 0x1e0 <UART_send_string+0x8>
		UART_send(*str);
		str++;
	}
	
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <__udivmodsi4>:
 1f4:	a1 e2       	ldi	r26, 0x21	; 33
 1f6:	1a 2e       	mov	r1, r26
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	fd 01       	movw	r30, r26
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <__udivmodsi4_ep>

00000200 <__udivmodsi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	ee 1f       	adc	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	a2 17       	cp	r26, r18
 20a:	b3 07       	cpc	r27, r19
 20c:	e4 07       	cpc	r30, r20
 20e:	f5 07       	cpc	r31, r21
 210:	20 f0       	brcs	.+8      	; 0x21a <__udivmodsi4_ep>
 212:	a2 1b       	sub	r26, r18
 214:	b3 0b       	sbc	r27, r19
 216:	e4 0b       	sbc	r30, r20
 218:	f5 0b       	sbc	r31, r21

0000021a <__udivmodsi4_ep>:
 21a:	66 1f       	adc	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	1a 94       	dec	r1
 224:	69 f7       	brne	.-38     	; 0x200 <__udivmodsi4_loop>
 226:	60 95       	com	r22
 228:	70 95       	com	r23
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	9b 01       	movw	r18, r22
 230:	ac 01       	movw	r20, r24
 232:	bd 01       	movw	r22, r26
 234:	cf 01       	movw	r24, r30
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
