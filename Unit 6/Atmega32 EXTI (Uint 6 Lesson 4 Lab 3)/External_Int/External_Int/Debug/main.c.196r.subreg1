
;; Function EXTI_init (EXTI_init, funcdef_no=21, decl_uid=1943, cgraph_uid=21, symbol_order=21)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:HI 58)
        (const_int 85 [0x55])) .././main.c:40 83 {*movhi}
     (nil))
(insn 6 5 7 2 (set (reg:QI 42 [ D.2044 ])
        (mem/v:QI (reg/f:HI 58) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])) .././main.c:40 71 {movqi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:QI 43 [ D.2044 ])
        (ior:QI (reg:QI 42 [ D.2044 ])
            (const_int 4 [0x4]))) .././main.c:40 266 {iorqi3}
     (nil))
(insn 8 7 9 2 (set (reg/f:HI 59)
        (const_int 85 [0x55])) .././main.c:40 83 {*movhi}
     (nil))
(insn 9 8 10 2 (set (mem/v:QI (reg/f:HI 59) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])
        (reg:QI 43 [ D.2044 ])) .././main.c:40 71 {movqi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:HI 60)
        (const_int 85 [0x55])) .././main.c:40 83 {*movhi}
     (nil))
(insn 11 10 12 2 (set (reg:QI 44 [ D.2044 ])
        (mem/v:QI (reg/f:HI 60) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])) .././main.c:40 71 {movqi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:QI 45 [ D.2044 ])
        (ior:QI (reg:QI 44 [ D.2044 ])
            (const_int 8 [0x8]))) .././main.c:40 266 {iorqi3}
     (nil))
(insn 13 12 14 2 (set (reg/f:HI 61)
        (const_int 85 [0x55])) .././main.c:40 83 {*movhi}
     (nil))
(insn 14 13 15 2 (set (mem/v:QI (reg/f:HI 61) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])
        (reg:QI 45 [ D.2044 ])) .././main.c:40 71 {movqi_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:HI 62)
        (const_int 85 [0x55])) .././main.c:41 83 {*movhi}
     (nil))
(insn 16 15 17 2 (set (reg:QI 46 [ D.2044 ])
        (mem/v:QI (reg/f:HI 62) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])) .././main.c:41 71 {movqi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:QI 47 [ D.2044 ])
        (ior:QI (reg:QI 46 [ D.2044 ])
            (const_int 1 [0x1]))) .././main.c:41 266 {iorqi3}
     (nil))
(insn 18 17 19 2 (set (reg/f:HI 63)
        (const_int 85 [0x55])) .././main.c:41 83 {*movhi}
     (nil))
(insn 19 18 20 2 (set (mem/v:QI (reg/f:HI 63) [0 MEM[(volatile unsigned char *)85B]+0 S1 A8])
        (reg:QI 47 [ D.2044 ])) .././main.c:41 71 {movqi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:HI 64)
        (const_int 84 [0x54])) .././main.c:42 83 {*movhi}
     (nil))
(insn 21 20 22 2 (set (reg:QI 48 [ D.2044 ])
        (mem/v:QI (reg/f:HI 64) [0 MEM[(volatile unsigned char *)84B]+0 S1 A8])) .././main.c:42 71 {movqi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:QI 49 [ D.2044 ])
        (and:QI (reg:QI 48 [ D.2044 ])
            (const_int -65 [0xffffffffffffffbf]))) .././main.c:42 262 {andqi3}
     (nil))
(insn 23 22 24 2 (set (reg/f:HI 65)
        (const_int 84 [0x54])) .././main.c:42 83 {*movhi}
     (nil))
(insn 24 23 25 2 (set (mem/v:QI (reg/f:HI 65) [0 MEM[(volatile unsigned char *)84B]+0 S1 A8])
        (reg:QI 49 [ D.2044 ])) .././main.c:42 71 {movqi_insn}
     (nil))
(insn 25 24 26 2 (set (reg/f:HI 66)
        (const_int 91 [0x5b])) .././main.c:46 83 {*movhi}
     (nil))
(insn 26 25 27 2 (set (reg:QI 50 [ D.2044 ])
        (mem/v:QI (reg/f:HI 66) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])) .././main.c:46 71 {movqi_insn}
     (nil))
(insn 27 26 28 2 (set (reg:QI 51 [ D.2044 ])
        (ior:QI (reg:QI 50 [ D.2044 ])
            (const_int -128 [0xffffffffffffff80]))) .././main.c:46 266 {iorqi3}
     (nil))
(insn 28 27 29 2 (set (reg/f:HI 67)
        (const_int 91 [0x5b])) .././main.c:46 83 {*movhi}
     (nil))
(insn 29 28 30 2 (set (mem/v:QI (reg/f:HI 67) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])
        (reg:QI 51 [ D.2044 ])) .././main.c:46 71 {movqi_insn}
     (nil))
(insn 30 29 31 2 (set (reg/f:HI 68)
        (const_int 91 [0x5b])) .././main.c:47 83 {*movhi}
     (nil))
(insn 31 30 32 2 (set (reg:QI 52 [ D.2044 ])
        (mem/v:QI (reg/f:HI 68) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])) .././main.c:47 71 {movqi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:QI 53 [ D.2044 ])
        (ior:QI (reg:QI 52 [ D.2044 ])
            (const_int 64 [0x40]))) .././main.c:47 266 {iorqi3}
     (nil))
(insn 33 32 34 2 (set (reg/f:HI 69)
        (const_int 91 [0x5b])) .././main.c:47 83 {*movhi}
     (nil))
(insn 34 33 35 2 (set (mem/v:QI (reg/f:HI 69) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])
        (reg:QI 53 [ D.2044 ])) .././main.c:47 71 {movqi_insn}
     (nil))
(insn 35 34 36 2 (set (reg/f:HI 70)
        (const_int 91 [0x5b])) .././main.c:48 83 {*movhi}
     (nil))
(insn 36 35 37 2 (set (reg:QI 54 [ D.2044 ])
        (mem/v:QI (reg/f:HI 70) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])) .././main.c:48 71 {movqi_insn}
     (nil))
(insn 37 36 38 2 (set (reg:QI 55 [ D.2044 ])
        (ior:QI (reg:QI 54 [ D.2044 ])
            (const_int 32 [0x20]))) .././main.c:48 266 {iorqi3}
     (nil))
(insn 38 37 39 2 (set (reg/f:HI 71)
        (const_int 91 [0x5b])) .././main.c:48 83 {*movhi}
     (nil))
(insn 39 38 40 2 (set (mem/v:QI (reg/f:HI 71) [0 MEM[(volatile unsigned char *)91B]+0 S1 A8])
        (reg:QI 55 [ D.2044 ])) .././main.c:48 71 {movqi_insn}
     (nil))
(insn 40 39 41 2 (set (reg/f:HI 72)
        (const_int 95 [0x5f])) .././main.c:51 83 {*movhi}
     (nil))
(insn 41 40 42 2 (set (reg:QI 56 [ D.2044 ])
        (mem/v:QI (reg/f:HI 72) [0 MEM[(volatile unsigned char *)95B]+0 S1 A8])) .././main.c:51 71 {movqi_insn}
     (nil))
(insn 42 41 43 2 (set (reg:QI 57 [ D.2044 ])
        (ior:QI (reg:QI 56 [ D.2044 ])
            (const_int -128 [0xffffffffffffff80]))) .././main.c:51 266 {iorqi3}
     (nil))
(insn 43 42 44 2 (set (reg/f:HI 73)
        (const_int 95 [0x5f])) .././main.c:51 83 {*movhi}
     (nil))
(insn 44 43 0 2 (set (mem/v:QI (reg/f:HI 73) [0 MEM[(volatile unsigned char *)95B]+0 S1 A8])
        (reg:QI 57 [ D.2044 ])) .././main.c:51 71 {movqi_insn}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function DIO_init (DIO_init, funcdef_no=22, decl_uid=1946, cgraph_uid=22, symbol_order=22)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:HI 54)
        (const_int 49 [0x31])) .././main.c:57 83 {*movhi}
     (nil))
(insn 6 5 7 2 (set (reg:QI 42 [ D.2045 ])
        (mem/v:QI (reg/f:HI 54) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])) .././main.c:57 71 {movqi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:QI 43 [ D.2045 ])
        (and:QI (reg:QI 42 [ D.2045 ])
            (const_int -5 [0xfffffffffffffffb]))) .././main.c:57 262 {andqi3}
     (nil))
(insn 8 7 9 2 (set (reg/f:HI 55)
        (const_int 49 [0x31])) .././main.c:57 83 {*movhi}
     (nil))
(insn 9 8 10 2 (set (mem/v:QI (reg/f:HI 55) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])
        (reg:QI 43 [ D.2045 ])) .././main.c:57 71 {movqi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:HI 56)
        (const_int 49 [0x31])) .././main.c:58 83 {*movhi}
     (nil))
(insn 11 10 12 2 (set (reg:QI 44 [ D.2045 ])
        (mem/v:QI (reg/f:HI 56) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])) .././main.c:58 71 {movqi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:QI 45 [ D.2045 ])
        (and:QI (reg:QI 44 [ D.2045 ])
            (const_int -9 [0xfffffffffffffff7]))) .././main.c:58 262 {andqi3}
     (nil))
(insn 13 12 14 2 (set (reg/f:HI 57)
        (const_int 49 [0x31])) .././main.c:58 83 {*movhi}
     (nil))
(insn 14 13 15 2 (set (mem/v:QI (reg/f:HI 57) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])
        (reg:QI 45 [ D.2045 ])) .././main.c:58 71 {movqi_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:HI 58)
        (const_int 55 [0x37])) .././main.c:59 83 {*movhi}
     (nil))
(insn 16 15 17 2 (set (reg:QI 46 [ D.2045 ])
        (mem/v:QI (reg/f:HI 58) [0 MEM[(volatile unsigned char *)55B]+0 S1 A8])) .././main.c:59 71 {movqi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:QI 47 [ D.2045 ])
        (and:QI (reg:QI 46 [ D.2045 ])
            (const_int -5 [0xfffffffffffffffb]))) .././main.c:59 262 {andqi3}
     (nil))
(insn 18 17 19 2 (set (reg/f:HI 59)
        (const_int 55 [0x37])) .././main.c:59 83 {*movhi}
     (nil))
(insn 19 18 20 2 (set (mem/v:QI (reg/f:HI 59) [0 MEM[(volatile unsigned char *)55B]+0 S1 A8])
        (reg:QI 47 [ D.2045 ])) .././main.c:59 71 {movqi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:HI 60)
        (const_int 49 [0x31])) .././main.c:62 83 {*movhi}
     (nil))
(insn 21 20 22 2 (set (reg:QI 48 [ D.2045 ])
        (mem/v:QI (reg/f:HI 60) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])) .././main.c:62 71 {movqi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:QI 49 [ D.2045 ])
        (ior:QI (reg:QI 48 [ D.2045 ])
            (const_int 32 [0x20]))) .././main.c:62 266 {iorqi3}
     (nil))
(insn 23 22 24 2 (set (reg/f:HI 61)
        (const_int 49 [0x31])) .././main.c:62 83 {*movhi}
     (nil))
(insn 24 23 25 2 (set (mem/v:QI (reg/f:HI 61) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])
        (reg:QI 49 [ D.2045 ])) .././main.c:62 71 {movqi_insn}
     (nil))
(insn 25 24 26 2 (set (reg/f:HI 62)
        (const_int 49 [0x31])) .././main.c:63 83 {*movhi}
     (nil))
(insn 26 25 27 2 (set (reg:QI 50 [ D.2045 ])
        (mem/v:QI (reg/f:HI 62) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])) .././main.c:63 71 {movqi_insn}
     (nil))
(insn 27 26 28 2 (set (reg:QI 51 [ D.2045 ])
        (ior:QI (reg:QI 50 [ D.2045 ])
            (const_int 64 [0x40]))) .././main.c:63 266 {iorqi3}
     (nil))
(insn 28 27 29 2 (set (reg/f:HI 63)
        (const_int 49 [0x31])) .././main.c:63 83 {*movhi}
     (nil))
(insn 29 28 30 2 (set (mem/v:QI (reg/f:HI 63) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])
        (reg:QI 51 [ D.2045 ])) .././main.c:63 71 {movqi_insn}
     (nil))
(insn 30 29 31 2 (set (reg/f:HI 64)
        (const_int 49 [0x31])) .././main.c:64 83 {*movhi}
     (nil))
(insn 31 30 32 2 (set (reg:QI 52 [ D.2045 ])
        (mem/v:QI (reg/f:HI 64) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])) .././main.c:64 71 {movqi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:QI 53 [ D.2045 ])
        (ior:QI (reg:QI 52 [ D.2045 ])
            (const_int -128 [0xffffffffffffff80]))) .././main.c:64 266 {iorqi3}
     (nil))
(insn 33 32 34 2 (set (reg/f:HI 65)
        (const_int 49 [0x31])) .././main.c:64 83 {*movhi}
     (nil))
(insn 34 33 0 2 (set (mem/v:QI (reg/f:HI 65) [0 MEM[(volatile unsigned char *)49B]+0 S1 A8])
        (reg:QI 53 [ D.2045 ])) .././main.c:64 71 {movqi_insn}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function main (main, funcdef_no=23, decl_uid=1949, cgraph_uid=23, symbol_order=23) (executed once)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 6 2 (parallel [
            (call (mem:HI (symbol_ref:HI ("DIO_init") [flags 0x3]  <function_decl 00000000060761b0 DIO_init>) [0 DIO_init S2 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
        ]) .././main.c:69 434 {call_insn}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 6 5 8 2 (parallel [
            (call (mem:HI (symbol_ref:HI ("EXTI_init") [flags 0x3]  <function_decl 0000000006076000 EXTI_init>) [0 EXTI_init S2 A8])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
        ]) .././main.c:70 434 {call_insn}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;;  succ:       3 [100.0%]  (FALLTHRU)

;; basic block 3, loop depth 1, count 0, freq 10000, maybe hot
;;  prev block 2, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              3 [100.0%]  (FALLTHRU)
(code_label 8 6 7 3 4 "" [0 uses])
(note 7 8 0 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
;;  succ:       3 [100.0%]  (FALLTHRU)


;; Function __vector_1 (__vector_1, funcdef_no=24, decl_uid=1953, cgraph_uid=24, symbol_order=24)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:HI 46)
        (const_int 50 [0x32])) .././main.c:78 83 {*movhi}
     (nil))
(insn 6 5 7 2 (set (reg:QI 42 [ D.2046 ])
        (mem/v:QI (reg/f:HI 46) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:78 71 {movqi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:QI 43 [ D.2046 ])
        (ior:QI (reg:QI 42 [ D.2046 ])
            (const_int 32 [0x20]))) .././main.c:78 266 {iorqi3}
     (nil))
(insn 8 7 9 2 (set (reg/f:HI 47)
        (const_int 50 [0x32])) .././main.c:78 83 {*movhi}
     (nil))
(insn 9 8 10 2 (set (mem/v:QI (reg/f:HI 47) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 43 [ D.2046 ])) .././main.c:78 71 {movqi_insn}
     (nil))
(debug_insn 10 9 11 2 (var_location:SF __ms (const_double:SF 1.0e+3 [0x0.fap+10])) .././main.c:78 -1
     (nil))
(debug_insn 11 10 12 2 (var_location:SF __tmp (const_double:SF 1.0e+6 [0x0.f424p+20])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:174 -1
     (nil))
(debug_insn 12 11 13 2 (var_location:SI __ticks_dc (const_int 1000000 [0xf4240])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:184 -1
     (nil))
(insn 13 12 14 2 (parallel [
            (unspec_volatile [
                    (const_int 199999 [0x30d3f])
                    (const_int 3 [0x3])
                ] UNSPECV_DELAY_CYCLES)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 464 {delay_cycles_3}
     (nil))
(insn 14 13 15 2 (parallel [
            (unspec_volatile [
                    (const_int 2 [0x2])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(insn 15 14 16 2 (parallel [
            (unspec_volatile [
                    (const_int 1 [0x1])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(debug_insn 16 15 17 2 (var_location:SF __ms (clobber (const_int 0 [0]))) .././main.c:79 -1
     (nil))
(debug_insn 17 16 18 2 (var_location:SI __ticks_dc (clobber (const_int 0 [0]))) .././main.c:79 -1
     (nil))
(debug_insn 18 17 19 2 (var_location:SF __tmp (clobber (const_int 0 [0]))) .././main.c:79 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:HI 48)
        (const_int 50 [0x32])) .././main.c:80 83 {*movhi}
     (nil))
(insn 20 19 21 2 (set (reg:QI 44 [ D.2046 ])
        (mem/v:QI (reg/f:HI 48) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:80 71 {movqi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:QI 45 [ D.2046 ])
        (and:QI (reg:QI 44 [ D.2046 ])
            (const_int -33 [0xffffffffffffffdf]))) .././main.c:80 262 {andqi3}
     (nil))
(insn 22 21 23 2 (set (reg/f:HI 49)
        (const_int 50 [0x32])) .././main.c:80 83 {*movhi}
     (nil))
(insn 23 22 0 2 (set (mem/v:QI (reg/f:HI 49) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 45 [ D.2046 ])) .././main.c:80 71 {movqi_insn}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function __vector_2 (__vector_2, funcdef_no=25, decl_uid=1958, cgraph_uid=25, symbol_order=25)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:HI 46)
        (const_int 50 [0x32])) .././main.c:84 83 {*movhi}
     (nil))
(insn 6 5 7 2 (set (reg:QI 42 [ D.2047 ])
        (mem/v:QI (reg/f:HI 46) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:84 71 {movqi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:QI 43 [ D.2047 ])
        (ior:QI (reg:QI 42 [ D.2047 ])
            (const_int 64 [0x40]))) .././main.c:84 266 {iorqi3}
     (nil))
(insn 8 7 9 2 (set (reg/f:HI 47)
        (const_int 50 [0x32])) .././main.c:84 83 {*movhi}
     (nil))
(insn 9 8 10 2 (set (mem/v:QI (reg/f:HI 47) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 43 [ D.2047 ])) .././main.c:84 71 {movqi_insn}
     (nil))
(debug_insn 10 9 11 2 (var_location:SF __ms (const_double:SF 1.0e+3 [0x0.fap+10])) .././main.c:84 -1
     (nil))
(debug_insn 11 10 12 2 (var_location:SF __tmp (const_double:SF 1.0e+6 [0x0.f424p+20])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:174 -1
     (nil))
(debug_insn 12 11 13 2 (var_location:SI __ticks_dc (const_int 1000000 [0xf4240])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:184 -1
     (nil))
(insn 13 12 14 2 (parallel [
            (unspec_volatile [
                    (const_int 199999 [0x30d3f])
                    (const_int 3 [0x3])
                ] UNSPECV_DELAY_CYCLES)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 464 {delay_cycles_3}
     (nil))
(insn 14 13 15 2 (parallel [
            (unspec_volatile [
                    (const_int 2 [0x2])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(insn 15 14 16 2 (parallel [
            (unspec_volatile [
                    (const_int 1 [0x1])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(debug_insn 16 15 17 2 (var_location:SF __ms (clobber (const_int 0 [0]))) .././main.c:85 -1
     (nil))
(debug_insn 17 16 18 2 (var_location:SI __ticks_dc (clobber (const_int 0 [0]))) .././main.c:85 -1
     (nil))
(debug_insn 18 17 19 2 (var_location:SF __tmp (clobber (const_int 0 [0]))) .././main.c:85 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:HI 48)
        (const_int 50 [0x32])) .././main.c:86 83 {*movhi}
     (nil))
(insn 20 19 21 2 (set (reg:QI 44 [ D.2047 ])
        (mem/v:QI (reg/f:HI 48) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:86 71 {movqi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:QI 45 [ D.2047 ])
        (and:QI (reg:QI 44 [ D.2047 ])
            (const_int -65 [0xffffffffffffffbf]))) .././main.c:86 262 {andqi3}
     (nil))
(insn 22 21 23 2 (set (reg/f:HI 49)
        (const_int 50 [0x32])) .././main.c:86 83 {*movhi}
     (nil))
(insn 23 22 0 2 (set (mem/v:QI (reg/f:HI 49) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 45 [ D.2047 ])) .././main.c:86 71 {movqi_insn}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function __vector_3 (__vector_3, funcdef_no=26, decl_uid=1963, cgraph_uid=26, symbol_order=26)

Choices when optimizing for size:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,15

Choices when optimizing for speed:
  Splitting mode CC for copy lowering.
  Splitting mode HI for copy lowering.
  Splitting mode PSI for copy lowering.
  Splitting mode SI for copy lowering.
  Splitting mode DI for copy lowering.
  Splitting mode TI for copy lowering.
  Splitting mode HQ for copy lowering.
  Splitting mode SQ for copy lowering.
  Splitting mode DQ for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UHQ for copy lowering.
  Splitting mode USQ for copy lowering.
  Splitting mode UDQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode HA for copy lowering.
  Splitting mode SA for copy lowering.
  Splitting mode DA for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UHA for copy lowering.
  Splitting mode USA for copy lowering.
  Splitting mode UDA for copy lowering.
  Splitting mode UTA for copy lowering.
  Splitting mode SF for copy lowering.
  Splitting mode DF for copy lowering.
  Splitting mode SD for copy lowering.
  Splitting mode DD for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CQI for copy lowering.
  Splitting mode CHI for copy lowering.
  Splitting mode CPSI for copy lowering.
  Splitting mode CSI for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode SC for copy lowering.
  Splitting mode DC for copy lowering.
  Skipping mode HI for zero_extend lowering.
  Splitting mode HI for ashift lowering with shift amounts = 8,9,10,11,12,13,14,15
  Splitting mode HI for lshiftrt lowering with shift amounts = 8,9,10,11,12,13,15
  Splitting mode HI for ashiftrt lowering with shift amounts = 8,9,10,11,12,13,15

;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:HI 46)
        (const_int 50 [0x32])) .././main.c:90 83 {*movhi}
     (nil))
(insn 6 5 7 2 (set (reg:QI 42 [ D.2048 ])
        (mem/v:QI (reg/f:HI 46) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:90 71 {movqi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:QI 43 [ D.2048 ])
        (ior:QI (reg:QI 42 [ D.2048 ])
            (const_int -128 [0xffffffffffffff80]))) .././main.c:90 266 {iorqi3}
     (nil))
(insn 8 7 9 2 (set (reg/f:HI 47)
        (const_int 50 [0x32])) .././main.c:90 83 {*movhi}
     (nil))
(insn 9 8 10 2 (set (mem/v:QI (reg/f:HI 47) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 43 [ D.2048 ])) .././main.c:90 71 {movqi_insn}
     (nil))
(debug_insn 10 9 11 2 (var_location:SF __ms (const_double:SF 1.0e+3 [0x0.fap+10])) .././main.c:90 -1
     (nil))
(debug_insn 11 10 12 2 (var_location:SF __tmp (const_double:SF 1.0e+6 [0x0.f424p+20])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:174 -1
     (nil))
(debug_insn 12 11 13 2 (var_location:SI __ticks_dc (const_int 1000000 [0xf4240])) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:184 -1
     (nil))
(insn 13 12 14 2 (parallel [
            (unspec_volatile [
                    (const_int 199999 [0x30d3f])
                    (const_int 3 [0x3])
                ] UNSPECV_DELAY_CYCLES)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
            (clobber (scratch:QI))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 464 {delay_cycles_3}
     (nil))
(insn 14 13 15 2 (parallel [
            (unspec_volatile [
                    (const_int 2 [0x2])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(insn 15 14 16 2 (parallel [
            (unspec_volatile [
                    (const_int 1 [0x1])
                ] UNSPECV_NOP)
            (set (mem/v:BLK (scratch:HI) [0  A8])
                (unspec_volatile:BLK [
                        (mem/v:BLK (scratch:HI) [0  A8])
                    ] UNSPECV_MEMORY_BARRIER))
        ]) c:\program files\microchip\xc8\v2.36\avr\avr\include\util\delay.h:187 485 {*nopv}
     (nil))
(debug_insn 16 15 17 2 (var_location:SF __ms (clobber (const_int 0 [0]))) .././main.c:91 -1
     (nil))
(debug_insn 17 16 18 2 (var_location:SI __ticks_dc (clobber (const_int 0 [0]))) .././main.c:91 -1
     (nil))
(debug_insn 18 17 19 2 (var_location:SF __tmp (clobber (const_int 0 [0]))) .././main.c:91 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:HI 48)
        (const_int 50 [0x32])) .././main.c:92 83 {*movhi}
     (nil))
(insn 20 19 21 2 (set (reg:QI 44 [ D.2048 ])
        (mem/v:QI (reg/f:HI 48) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])) .././main.c:92 71 {movqi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:QI 45 [ D.2048 ])
        (and:QI (reg:QI 44 [ D.2048 ])
            (const_int 127 [0x7f]))) .././main.c:92 262 {andqi3}
     (nil))
(insn 22 21 23 2 (set (reg/f:HI 49)
        (const_int 50 [0x32])) .././main.c:92 83 {*movhi}
     (nil))
(insn 23 22 0 2 (set (mem/v:QI (reg/f:HI 49) [0 MEM[(volatile unsigned char *)50B]+0 S1 A8])
        (reg:QI 45 [ D.2048 ])) .././main.c:92 71 {movqi_insn}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

