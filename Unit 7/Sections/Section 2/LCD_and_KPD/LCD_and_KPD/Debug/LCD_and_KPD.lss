
LCD_and_KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001e2  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e70  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000460  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002da  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000023c  0000023c  00000310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000232c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_wait_till_free 0000002c  000001e0  000001e0  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_send_command 00000032  00000180  00000180  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_init 00000036  0000014a  0000014a  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_GOTO_XY 0000002e  000001b2  000001b2  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_send_char 00000060  000000ae  000000ae  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_send_string 0000001a  0000020c  0000020c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.count    00000001  00800060  00800060  0000031e  2**0
                  ALLOC
 21 .text.main    0000003c  0000010e  0000010e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  00000244  00000244  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  00000246  00000246  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  00000248  00000248  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  00000226  00000226  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000240  00000240  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
   8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
   c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  a6:	0c 94 13 01 	jmp	0x226	; 0x226 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000023c <__bad_interrupt>:
 23c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_wait_till_free:

000001e0 <LCD_wait_till_free>:
		CLR_BIT(LCD_CTRL_PORT,LCD_E_PIN);
	#endif
}

void LCD_wait_till_free(){
	LCD_DATA_DIR = 0;
 1e0:	1a ba       	out	0x1a, r1	; 26
	CLR_BIT(LCD_CTRL_PORT, LCD_RS_PIN);
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	88 bb       	out	0x18, r24	; 24
	SET_BIT(LCD_CTRL_PORT, LCD_RW_PIN);
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	88 bb       	out	0x18, r24	; 24
	SET_BIT(LCD_CTRL_PORT,LCD_E_PIN);
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_wait_till_free+0x18>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_wait_till_free+0x1e>
 1fe:	00 00       	nop
	_delay_ms(2);
	CLR_BIT(LCD_CTRL_PORT,LCD_E_PIN);
 200:	88 b3       	in	r24, 0x18	; 24
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	88 bb       	out	0x18, r24	; 24
	//while(GET_BIT(LCD_DATA_PIN,LCD_BF_PIN) == 1);
	LCD_DATA_DIR = 0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8a bb       	out	0x1a, r24	; 26
 20a:	08 95       	ret

Disassembly of section .text.LCD_send_command:

00000180 <LCD_send_command>:
	LCD_send_command(LCD_DISP_ON_CURSOR_BLINK);
	LCD_send_command(LCD_CLEAR_SCREEN);
	LCD_send_command(LCD_ENTRY_MODE);
}

void LCD_send_command(uint8_t command){
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
	LCD_wait_till_free();
 184:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_wait_till_free>
	#ifdef LCD_EIGHT_BIT_MODE
		LCD_DATA_PORT = command;
 188:	cb bb       	out	0x1b, r28	; 27
		CLR_BIT(LCD_CTRL_PORT,LCD_RS_PIN);
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	88 bb       	out	0x18, r24	; 24
		CLR_BIT(LCD_CTRL_PORT,LCD_RW_PIN);
 190:	88 b3       	in	r24, 0x18	; 24
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	88 bb       	out	0x18, r24	; 24
		SET_BIT(LCD_CTRL_PORT,LCD_E_PIN);
 196:	88 b3       	in	r24, 0x18	; 24
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	88 bb       	out	0x18, r24	; 24
 19c:	83 ef       	ldi	r24, 0xF3	; 243
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_send_command+0x20>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_send_command+0x26>
 1a6:	00 00       	nop
		_delay_ms(2);
		CLR_BIT(LCD_CTRL_PORT,LCD_E_PIN);
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	88 bb       	out	0x18, r24	; 24
	#endif
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

Disassembly of section .text.LCD_init:

0000014a <LCD_init>:

static uint8_t count = 0;

void LCD_init(void){
	#ifdef LCD_EIGHT_BIT_MODE
		LCD_DATA_DIR = 0xFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8a bb       	out	0x1a, r24	; 26
		LCD_CTRL_DIR |= (1 << LCD_RS_PIN | 1 << LCD_RW_PIN | 1 << LCD_E_PIN);
 14e:	87 b3       	in	r24, 0x17	; 23
 150:	8e 60       	ori	r24, 0x0E	; 14
 152:	87 bb       	out	0x17, r24	; 23
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_init+0xe>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_init+0x14>
 15e:	00 00       	nop
		_delay_ms(40);
		LCD_send_command(LCD_FUNCTION_8BIT_2LINES);
 160:	88 e3       	ldi	r24, 0x38	; 56
 162:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
		LCD_send_command(LCD_FUNCTION_8BIT_2LINES);		
 166:	88 e3       	ldi	r24, 0x38	; 56
 168:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
	#endif
	LCD_send_command(LCD_DISP_ON_CURSOR_BLINK);
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
	LCD_send_command(LCD_CLEAR_SCREEN);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
	LCD_send_command(LCD_ENTRY_MODE);
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
 17e:	08 95       	ret

Disassembly of section .text.LCD_GOTO_XY:

000001b2 <LCD_GOTO_XY>:
		LCD_send_char(*str);
		str++;
	}
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	c8 2f       	mov	r28, r24
 1b8:	d6 2f       	mov	r29, r22
	if (line == 1)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	31 f4       	brne	.+12     	; 0x1ca <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 1be:	60 31       	cpi	r22, 0x10	; 16
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <LCD_GOTO_XY+0x18>
		{
			LCD_send_command(LCD_BEGIN_AT_FIRST_ROW+position);
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	86 0f       	add	r24, r22
 1c6:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
		}
	}
	if (line == 2)
 1ca:	c2 30       	cpi	r28, 0x02	; 2
 1cc:	31 f4       	brne	.+12     	; 0x1da <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 1ce:	d0 31       	cpi	r29, 0x10	; 16
 1d0:	20 f4       	brcc	.+8      	; 0x1da <LCD_GOTO_XY+0x28>
		{
			LCD_send_command(LCD_BEGIN_AT_SECOND_ROW+position);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	8d 0f       	add	r24, r29
 1d6:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
		}
	}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

Disassembly of section .text.LCD_send_char:

000000ae <LCD_send_char>:
	CLR_BIT(LCD_CTRL_PORT,LCD_E_PIN);
	//while(GET_BIT(LCD_DATA_PIN,LCD_BF_PIN) == 1);
	LCD_DATA_DIR = 0xFF;
}

void LCD_send_char(uint8_t chr){
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
	if(count == 16){
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	80 31       	cpi	r24, 0x10	; 16
  b8:	29 f4       	brne	.+10     	; 0xc4 <LCD_send_char+0x16>
		LCD_GOTO_XY(2,0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_GOTO_XY>
  c2:	0b c0       	rjmp	.+22     	; 0xda <LCD_send_char+0x2c>
	}
	else if(count == 32){
  c4:	80 32       	cpi	r24, 0x20	; 32
  c6:	49 f4       	brne	.+18     	; 0xda <LCD_send_char+0x2c>
		LCD_send_command(LCD_CLEAR_SCREEN);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_send_command>
		LCD_GOTO_XY(1,0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_GOTO_XY>
		count = 0;
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	#ifdef LCD_EIGHT_BIT_MODE
	LCD_DATA_PORT = chr;
  da:	cb bb       	out	0x1b, r28	; 27
	SET_BIT(LCD_CTRL_PORT,LCD_RS_PIN);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL_PORT,LCD_RW_PIN);
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	88 bb       	out	0x18, r24	; 24
	SET_BIT(LCD_CTRL_PORT,LCD_E_PIN);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	83 ef       	ldi	r24, 0xF3	; 243
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_send_char+0x44>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_send_char+0x4a>
  f8:	00 00       	nop
	_delay_ms(2);
	CLR_BIT(LCD_CTRL_PORT,LCD_E_PIN);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	88 bb       	out	0x18, r24	; 24
	#endif	
    count++;
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

Disassembly of section .text.LCD_send_string:

0000020c <LCD_send_string>:

void LCD_send_string(uint8_t* str){
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
	while(*str != '\0'){
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_send_string+0xe>
		LCD_send_char(*str);
 214:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		str++;
 218:	21 96       	adiw	r28, 0x01	; 1
	#endif	
    count++;
}

void LCD_send_string(uint8_t* str){
	while(*str != '\0'){
 21a:	88 81       	ld	r24, Y
 21c:	81 11       	cpse	r24, r1
 21e:	fa cf       	rjmp	.-12     	; 0x214 <LCD_send_string+0x8>
		LCD_send_char(*str);
		str++;
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

Disassembly of section .text.main:

0000010e <main>:
 */ 

#include <xc.h>
#include "LCD.h"
int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x6>
 114:	00 d0       	rcall	.+0      	; 0x116 <main+0x8>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	char str[] = "Hel";
 11a:	88 e4       	ldi	r24, 0x48	; 72
 11c:	95 e6       	ldi	r25, 0x65	; 101
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	8c e6       	ldi	r24, 0x6C	; 108
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9c 83       	std	Y+4, r25	; 0x04
 128:	8b 83       	std	Y+3, r24	; 0x03
	LCD_init();
 12a:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_init>
	//LCD_send_string(str);
    while(1)
    {
		LCD_send_string(str);
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_send_string>
 136:	2f e5       	ldi	r18, 0x5F	; 95
 138:	8a ee       	ldi	r24, 0xEA	; 234
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x2e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x38>
 146:	00 00       	nop
 148:	f2 cf       	rjmp	.-28     	; 0x12e <main+0x20>

Disassembly of section .text.__dummy_fini:

00000244 <_fini>:
 244:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000246 <__funcs_on_exit>:
 246:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000248 <__simulator_exit>:
 248:	08 95       	ret

Disassembly of section .text.exit:

00000226 <exit>:
 226:	ec 01       	movw	r28, r24
 228:	0e 94 23 01 	call	0x246	; 0x246 <__funcs_on_exit>
 22c:	0e 94 22 01 	call	0x244	; 0x244 <_fini>
 230:	ce 01       	movw	r24, r28
 232:	0e 94 24 01 	call	0x248	; 0x248 <__simulator_exit>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 20 01 	call	0x240	; 0x240 <_Exit>

Disassembly of section .text._Exit:

00000240 <_Exit>:
 240:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
