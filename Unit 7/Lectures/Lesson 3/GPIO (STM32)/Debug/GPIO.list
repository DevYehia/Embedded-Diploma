
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000520  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000520  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000064f  00000000  00000000  00010549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ef  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000b0  00000000  00000000  00010d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00010e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001113  00000000  00000000  00010ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000095c  00000000  00000000  00011fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000042a2  00000000  00000000  0001292f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f4  00000000  00000000  00016c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004fc 	.word	0x080004fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004fc 	.word	0x080004fc

08000170 <GPIO_init>:
#define GET_CR(pin,GPIO) (((pin) < 8) ? &(GPIO->CRL) : &(GPIO->CRH)) //Determines whether to use CRL or CRH 

#define MAX_PIN 15


void GPIO_init(GPIO_t* GPIOx,GPIO_config_t* config){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    if(config->pinNo > MAX_PIN){ //Invalid Pin No.
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	f200 80b7 	bhi.w	80002f2 <GPIO_init+0x182>
        return;
    }
    volatile uint32_t* CR_reg = GET_CR(config->pinNo,GPIOx);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b07      	cmp	r3, #7
 800018a:	d801      	bhi.n	8000190 <GPIO_init+0x20>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	e001      	b.n	8000194 <GPIO_init+0x24>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	3304      	adds	r3, #4
 8000194:	60bb      	str	r3, [r7, #8]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 8000196:	2300      	movs	r3, #0
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	e019      	b.n	80001d0 <GPIO_init+0x60>
        CLR_BIT(*CR_reg, GET_CR_LSB(config->pinNo) + i);
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b07      	cmp	r3, #7
 80001a6:	d803      	bhi.n	80001b0 <GPIO_init+0x40>
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	e003      	b.n	80001b8 <GPIO_init+0x48>
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	3b08      	subs	r3, #8
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	68f9      	ldr	r1, [r7, #12]
 80001ba:	440b      	add	r3, r1
 80001bc:	2101      	movs	r1, #1
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	601a      	str	r2, [r3, #0]
    for(int i = 0 ; i < 4 ; i++){ //Clear the 4-bits of the pin configuration
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	3301      	adds	r3, #1
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	2b03      	cmp	r3, #3
 80001d4:	dde2      	ble.n	800019c <GPIO_init+0x2c>
    }
    if(config->pinMode >= O_PUSH_PULL && config -> pinMode <= O_ALT_OPEN_DRAIN){ //pin is output
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d82d      	bhi.n	800023a <GPIO_init+0xca>
        *CR_reg |= (config->pinSpeed << GET_CR_LSB(config->pinNo)); //set o/p speed in mode bits 
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	789b      	ldrb	r3, [r3, #2]
 80001e6:	4619      	mov	r1, r3
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b07      	cmp	r3, #7
 80001ee:	d803      	bhi.n	80001f8 <GPIO_init+0x88>
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	e003      	b.n	8000200 <GPIO_init+0x90>
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	3b08      	subs	r3, #8
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
 8000204:	431a      	orrs	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	601a      	str	r2, [r3, #0]
        *CR_reg |= ((config->pinMode << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	785b      	ldrb	r3, [r3, #1]
 8000212:	4619      	mov	r1, r3
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d803      	bhi.n	8000224 <GPIO_init+0xb4>
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	e003      	b.n	800022c <GPIO_init+0xbc>
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b08      	subs	r3, #8
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	431a      	orrs	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	e05c      	b.n	80002f4 <GPIO_init+0x184>
    }
    
    else if (config->pinMode == I_ANALOG || config -> pinMode == I_FLOATING){
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	2b04      	cmp	r3, #4
 8000240:	d003      	beq.n	800024a <GPIO_init+0xda>
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	2b05      	cmp	r3, #5
 8000248:	d117      	bne.n	800027a <GPIO_init+0x10a>
        *CR_reg |= (((config->pinMode - 4) << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	785b      	ldrb	r3, [r3, #1]
 8000252:	1f19      	subs	r1, r3, #4
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b07      	cmp	r3, #7
 800025a:	d803      	bhi.n	8000264 <GPIO_init+0xf4>
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	e003      	b.n	800026c <GPIO_init+0xfc>
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	3b08      	subs	r3, #8
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	431a      	orrs	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	e03c      	b.n	80002f4 <GPIO_init+0x184>
    }

    else if (config->pinMode == I_PULL_DOWN || config -> pinMode == I_PULL_UP){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	2b06      	cmp	r3, #6
 8000280:	d003      	beq.n	800028a <GPIO_init+0x11a>
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	2b07      	cmp	r3, #7
 8000288:	d134      	bne.n	80002f4 <GPIO_init+0x184>
        *CR_reg |= ((0b10 << GET_CR_LSB(config->pinNo)) << 2); //set CNF bits
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	7812      	ldrb	r2, [r2, #0]
 8000292:	2a07      	cmp	r2, #7
 8000294:	d807      	bhi.n	80002a6 <GPIO_init+0x136>
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	7812      	ldrb	r2, [r2, #0]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	2102      	movs	r1, #2
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	0092      	lsls	r2, r2, #2
 80002a4:	e007      	b.n	80002b6 <GPIO_init+0x146>
 80002a6:	683a      	ldr	r2, [r7, #0]
 80002a8:	7812      	ldrb	r2, [r2, #0]
 80002aa:	3a08      	subs	r2, #8
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	2102      	movs	r1, #2
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	0092      	lsls	r2, r2, #2
 80002b6:	431a      	orrs	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	601a      	str	r2, [r3, #0]
        if(config->pinMode == I_PULL_DOWN){
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	785b      	ldrb	r3, [r3, #1]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	d10b      	bne.n	80002dc <GPIO_init+0x16c>
            CLR_BIT(GPIOx->ODR,config->pinNo);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	7812      	ldrb	r2, [r2, #0]
 80002cc:	4611      	mov	r1, r2
 80002ce:	2201      	movs	r2, #1
 80002d0:	408a      	lsls	r2, r1
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	e00b      	b.n	80002f4 <GPIO_init+0x184>
        }
        else{
            SET_BIT(GPIOx->ODR,config->pinNo);            
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	7812      	ldrb	r2, [r2, #0]
 80002e4:	4611      	mov	r1, r2
 80002e6:	2201      	movs	r2, #1
 80002e8:	408a      	lsls	r2, r1
 80002ea:	431a      	orrs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	e000      	b.n	80002f4 <GPIO_init+0x184>
        return;
 80002f2:	bf00      	nop
        }        
    }    
}
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <GPIO_read_pin>:
            SET_BIT(RCC->APB2RSTR,6);
            CLR_BIT(RCC->APB2RSTR,6);
    }
}

uint8_t GPIO_read_pin(GPIO_t* GPIOx, uint8_t pinNo){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
    return GET_BIT(GPIOx->IDR,pinNo);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	fa22 f303 	lsr.w	r3, r2, r3
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <GPIO_toggle_pin>:

void GPIO_write_port(GPIO_t* GPIOx, uint16_t value){
    GPIOx->ODR = value;
}

void GPIO_toggle_pin(GPIO_t* GPIOx, uint8_t pinNo){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
    TGL_BIT(GPIOx->ODR,pinNo);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	78fa      	ldrb	r2, [r7, #3]
 8000336:	2101      	movs	r1, #1
 8000338:	fa01 f202 	lsl.w	r2, r1, r2
 800033c:	405a      	eors	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60da      	str	r2, [r3, #12]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <init>:

#include "gpio.h"



void init(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  
  //enable clock to GPIO A and GPIO B
  ENABLE_GPIOA();
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <init+0x74>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <init+0x74>)
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	6193      	str	r3, [r2, #24]
  ENABLE_GPIOB();
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <init+0x74>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <init+0x74>)
 8000364:	f043 0308 	orr.w	r3, r3, #8
 8000368:	6193      	str	r3, [r2, #24]
  //B1 --> (Push-Pull) Output
  //B13 --> (Push-Pull) Output


  //A1 Configuration
  GPIO_config_t pinConfig = {I_FLOATING,PIN1,0};
 800036a:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <init+0x78>)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	4611      	mov	r1, r2
 8000372:	8019      	strh	r1, [r3, #0]
 8000374:	3302      	adds	r3, #2
 8000376:	0c12      	lsrs	r2, r2, #16
 8000378:	701a      	strb	r2, [r3, #0]
  GPIO_init(GPIOA,&pinConfig);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4619      	mov	r1, r3
 800037e:	4812      	ldr	r0, [pc, #72]	; (80003c8 <init+0x7c>)
 8000380:	f7ff fef6 	bl	8000170 <GPIO_init>

  //A13 Configuration
  pinConfig.pinNo = PIN13;
 8000384:	230d      	movs	r3, #13
 8000386:	713b      	strb	r3, [r7, #4]
  GPIO_init(GPIOA,&pinConfig);
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4619      	mov	r1, r3
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <init+0x7c>)
 800038e:	f7ff feef 	bl	8000170 <GPIO_init>


  //B1 Configuration
  pinConfig.pinNo = PIN1;
 8000392:	2301      	movs	r3, #1
 8000394:	713b      	strb	r3, [r7, #4]
  pinConfig.pinMode = O_PUSH_PULL;
 8000396:	2300      	movs	r3, #0
 8000398:	717b      	strb	r3, [r7, #5]
  pinConfig.pinSpeed = MAX_10_MHZ;
 800039a:	2301      	movs	r3, #1
 800039c:	71bb      	strb	r3, [r7, #6]
  GPIO_init(GPIOB,&pinConfig);  
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	480a      	ldr	r0, [pc, #40]	; (80003cc <init+0x80>)
 80003a4:	f7ff fee4 	bl	8000170 <GPIO_init>

  //B13 Configuration
  pinConfig.pinNo = PIN13;
 80003a8:	230d      	movs	r3, #13
 80003aa:	713b      	strb	r3, [r7, #4]
  GPIO_init(GPIOB,&pinConfig);  
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	4806      	ldr	r0, [pc, #24]	; (80003cc <init+0x80>)
 80003b2:	f7ff fedd 	bl	8000170 <GPIO_init>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	08000514 	.word	0x08000514
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <delay>:

void delay(int time){
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < time ; i++){
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e00b      	b.n	80003f6 <delay+0x26>
    for(int j = 0 ; j < 255 ; j++);
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <delay+0x1a>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2bfe      	cmp	r3, #254	; 0xfe
 80003ee:	ddf9      	ble.n	80003e4 <delay+0x14>
  for(int i = 0 ; i < time ; i++){
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbef      	blt.n	80003de <delay+0xe>
  }
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <main>:

int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  init();
 800040c:	f7ff ff9e 	bl	800034c <init>
    /* Loop forever */
	for(;;){
    if(GPIO_read_pin(GPIOA,PIN1) == 0){ //single press
 8000410:	2101      	movs	r1, #1
 8000412:	4811      	ldr	r0, [pc, #68]	; (8000458 <main+0x50>)
 8000414:	f7ff ff72 	bl	80002fc <GPIO_read_pin>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10b      	bne.n	8000436 <main+0x2e>
      GPIO_toggle_pin(GPIOB,PIN1);
 800041e:	2101      	movs	r1, #1
 8000420:	480e      	ldr	r0, [pc, #56]	; (800045c <main+0x54>)
 8000422:	f7ff ff7f 	bl	8000324 <GPIO_toggle_pin>
      while(GPIO_read_pin(GPIOA,PIN1) == 0);
 8000426:	bf00      	nop
 8000428:	2101      	movs	r1, #1
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <main+0x50>)
 800042c:	f7ff ff66 	bl	80002fc <GPIO_read_pin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f8      	beq.n	8000428 <main+0x20>
    }
    if(GPIO_read_pin(GPIOA,PIN13) == 1){ //multiple press
 8000436:	210d      	movs	r1, #13
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <main+0x50>)
 800043a:	f7ff ff5f 	bl	80002fc <GPIO_read_pin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d103      	bne.n	800044c <main+0x44>
      GPIO_toggle_pin(GPIOB,PIN13);
 8000444:	210d      	movs	r1, #13
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <main+0x54>)
 8000448:	f7ff ff6c 	bl	8000324 <GPIO_toggle_pin>
    }
    delay(1000);
 800044c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000450:	f7ff ffbe 	bl	80003d0 <delay>
    if(GPIO_read_pin(GPIOA,PIN1) == 0){ //single press
 8000454:	e7dc      	b.n	8000410 <main+0x8>
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	; (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 f811 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ffb9 	bl	8000408 <main>

08000496 <LoopForever>:

LoopForever:
    b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a4:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004ac:	2000001c 	.word	0x2000001c

080004b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_2_IRQHandler>
	...

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	2500      	movs	r5, #0
 80004b8:	4e0c      	ldr	r6, [pc, #48]	; (80004ec <__libc_init_array+0x38>)
 80004ba:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	10a4      	asrs	r4, r4, #2
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	f000 f81a 	bl	80004fc <_init>
 80004c8:	2500      	movs	r5, #0
 80004ca:	4e0a      	ldr	r6, [pc, #40]	; (80004f4 <__libc_init_array+0x40>)
 80004cc:	4c0a      	ldr	r4, [pc, #40]	; (80004f8 <__libc_init_array+0x44>)
 80004ce:	1ba4      	subs	r4, r4, r6
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	42a5      	cmp	r5, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004dc:	4798      	blx	r3
 80004de:	3501      	adds	r5, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004e6:	4798      	blx	r3
 80004e8:	3501      	adds	r5, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000518 	.word	0x08000518
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	0800051c 	.word	0x0800051c

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
