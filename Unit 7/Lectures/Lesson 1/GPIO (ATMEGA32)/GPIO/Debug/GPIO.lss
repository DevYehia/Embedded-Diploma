
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a8  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002a8  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075a  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000539  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000240  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.setDirection 00000058  00000168  00000168  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.delay   00000030  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    000000ba  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000210  00000210  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000212  00000212  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000001f0  000001f0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
   8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
   c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000206 <__bad_interrupt>:
 206:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setDirection:

00000168 <setDirection>:
#define DDRD   *(volatile unsigned char *)0x31
#define PORTD  *(volatile unsigned char *)0x32

int x;

void setDirection(void){
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,4);
 170:	81 e3       	ldi	r24, 0x31	; 49
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 e3       	ldi	r18, 0x31	; 49
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	20 81       	ld	r18, Z
 17c:	20 61       	ori	r18, 0x10	; 16
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
	SET_BIT(DDRD,5);
 182:	81 e3       	ldi	r24, 0x31	; 49
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	21 e3       	ldi	r18, 0x31	; 49
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	20 62       	ori	r18, 0x20	; 32
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
	SET_BIT(DDRD,6);
 194:	81 e3       	ldi	r24, 0x31	; 49
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	21 e3       	ldi	r18, 0x31	; 49
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	20 64       	ori	r18, 0x40	; 64
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
	SET_BIT(DDRD,7);
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	21 e3       	ldi	r18, 0x31	; 49
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	20 68       	ori	r18, 0x80	; 128
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
}
 1b8:	00 00       	nop
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

Disassembly of section .text.delay:

000001c0 <delay>:

void delay(void){
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <delay+0x6>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	for(unsigned int i = 0 ; i < 60000 ; i++); //Note: int size is 2 bytes
 1ca:	1a 82       	std	Y+2, r1	; 0x02
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <delay+0x1a>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9a 83       	std	Y+2, r25	; 0x02
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	80 36       	cpi	r24, 0x60	; 96
 1e0:	9a 4e       	sbci	r25, 0xEA	; 234
 1e2:	b0 f3       	brcs	.-20     	; 0x1d0 <delay+0x10>
}
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

Disassembly of section .text.main:

000000ae <main>:
int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	x = sizeof(long);
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	setDirection();
  c2:	0e 94 b4 00 	call	0x168	; 0x168 <setDirection>
    while(1)
    {
		SET_BIT(PORTD,5);
  c6:	82 e3       	ldi	r24, 0x32	; 50
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	22 e3       	ldi	r18, 0x32	; 50
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	20 62       	ori	r18, 0x20	; 32
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
		delay();
  d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <delay>
		CLR_BIT(PORTD,5);
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	22 e3       	ldi	r18, 0x32	; 50
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	2f 7d       	andi	r18, 0xDF	; 223
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

		SET_BIT(PORTD,6);
  ee:	82 e3       	ldi	r24, 0x32	; 50
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	22 e3       	ldi	r18, 0x32	; 50
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	20 64       	ori	r18, 0x40	; 64
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
		delay();
 100:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <delay>
		CLR_BIT(PORTD,6);
 104:	82 e3       	ldi	r24, 0x32	; 50
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	22 e3       	ldi	r18, 0x32	; 50
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	2f 7b       	andi	r18, 0xBF	; 191
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
		
		SET_BIT(PORTD,7);
 116:	82 e3       	ldi	r24, 0x32	; 50
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	22 e3       	ldi	r18, 0x32	; 50
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	20 68       	ori	r18, 0x80	; 128
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
		delay();
 128:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <delay>
		CLR_BIT(PORTD,7);
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	22 e3       	ldi	r18, 0x32	; 50
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	2f 77       	andi	r18, 0x7F	; 127
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
				
		SET_BIT(PORTD,4);
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	22 e3       	ldi	r18, 0x32	; 50
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 61       	ori	r18, 0x10	; 16
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
		delay();
 150:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <delay>
		CLR_BIT(PORTD,4);		
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	22 e3       	ldi	r18, 0x32	; 50
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	2f 7e       	andi	r18, 0xEF	; 239
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18

    }
 166:	af cf       	rjmp	.-162    	; 0xc6 <main+0x18>

Disassembly of section .text.__dummy_fini:

0000020e <_fini>:
 20e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000210 <__funcs_on_exit>:
 210:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000212 <__simulator_exit>:
 212:	08 95       	ret

Disassembly of section .text.exit:

000001f0 <exit>:
 1f0:	ec 01       	movw	r28, r24
 1f2:	0e 94 08 01 	call	0x210	; 0x210 <__funcs_on_exit>
 1f6:	0e 94 07 01 	call	0x20e	; 0x20e <_fini>
 1fa:	ce 01       	movw	r24, r28
 1fc:	0e 94 09 01 	call	0x212	; 0x212 <__simulator_exit>
 200:	ce 01       	movw	r24, r28
 202:	0e 94 05 01 	call	0x20a	; 0x20a <_Exit>

Disassembly of section .text._Exit:

0000020a <_Exit>:
 20a:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
