
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000863  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000241  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setDirection 00000014  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000003c  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setDirection:

000000be <setDirection>:
#define DDRC   *(volatile unsigned char *)0x34
#define PORTC  *(volatile unsigned char *)0x35
#define PINC  *(volatile unsigned char *)0x33

void setDirection(void){
	CLR_BIT(DDRD,0);
  be:	81 b3       	in	r24, 0x11	; 17
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(PORTD,0);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	82 bb       	out	0x12, r24	; 18
	
	SET_BIT(DDRD,4);
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	81 bb       	out	0x11, r24	; 17
  d0:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}


int main(void)
{
	setDirection(); //PinD4 output and Pin D0 as Floating input
  6c:	0e 94 5f 00 	call	0xbe	; 0xbe <setDirection>
    while(1)
    {
		if(GET_BIT(PIND,0) == 1){
  70:	80 9b       	sbis	0x10, 0	; 16
  72:	fe cf       	rjmp	.-4      	; 0x70 <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	87 ea       	ldi	r24, 0xA7	; 167
  76:	91 e6       	ldi	r25, 0x61	; 97
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <main+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <main+0x12>
  7e:	00 00       	nop
			_delay_ms(100); //to counter debouncing
			if(GET_BIT(PIND,0) == 1){
  80:	80 9b       	sbis	0x10, 0	; 16
  82:	f6 cf       	rjmp	.-20     	; 0x70 <main+0x4>
				SET_BIT(PORTD,4);
  84:	82 b3       	in	r24, 0x12	; 18
  86:	80 61       	ori	r24, 0x10	; 16
  88:	82 bb       	out	0x12, r24	; 18
  8a:	9f e3       	ldi	r25, 0x3F	; 63
  8c:	2d e0       	ldi	r18, 0x0D	; 13
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	91 50       	subi	r25, 0x01	; 1
  92:	20 40       	sbci	r18, 0x00	; 0
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
				_delay_ms(1000);
				CLR_BIT(PORTD,4);
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	82 bb       	out	0x12, r24	; 18
				while(GET_BIT(PIND,0) == 1);
  a2:	80 99       	sbic	0x10, 0	; 16
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x36>
  a6:	e4 cf       	rjmp	.-56     	; 0x70 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000da <_fini>:
  da:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000dc <__funcs_on_exit>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000de <__simulator_exit>:
  de:	08 95       	ret

Disassembly of section .text.exit:

000000a8 <exit>:
  a8:	ec 01       	movw	r28, r24
  aa:	0e 94 6e 00 	call	0xdc	; 0xdc <__funcs_on_exit>
  ae:	0e 94 6d 00 	call	0xda	; 0xda <_fini>
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 6f 00 	call	0xde	; 0xde <__simulator_exit>
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Exit>

Disassembly of section .text._Exit:

000000d6 <_Exit>:
  d6:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
