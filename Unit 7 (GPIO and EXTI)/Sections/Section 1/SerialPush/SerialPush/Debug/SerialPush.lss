
SerialPush.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ca  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000001f9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087e  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  00000ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setDirection 0000002e  000000b4  000000b4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000048  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.libgcc.div 00000028  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.libgcc.div 00000028  0000010a  0000010a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000132  00000132  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setDirection:

000000b4 <setDirection>:
#define DDRC   *(volatile unsigned char *)0x34
#define PORTC  *(volatile unsigned char *)0x35
#define PINC  *(volatile unsigned char *)0x33

void setDirection(void){
	CLR_BIT(DDRD,0);
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(PORTD,0);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	82 bb       	out	0x12, r24	; 18
	
	for(char i = 5 ; i < 8 ; i++){
  c0:	25 e0       	ldi	r18, 0x05	; 5
  c2:	0c c0       	rjmp	.+24     	; 0xdc <setDirection+0x28>
		SET_BIT(DDRD,i);
  c4:	31 b3       	in	r19, 0x11	; 17
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 2e       	mov	r0, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <setDirection+0x1e>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <setDirection+0x1a>
  d6:	83 2b       	or	r24, r19
  d8:	81 bb       	out	0x11, r24	; 17

void setDirection(void){
	CLR_BIT(DDRD,0);
	CLR_BIT(PORTD,0);
	
	for(char i = 5 ; i < 8 ; i++){
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	90 f3       	brcs	.-28     	; 0xc4 <setDirection+0x10>
		SET_BIT(DDRD,i);
	}
}
  e0:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
	char currLED = 5;
	char currIndex = 0;
	setDirection(); //All PortD Pins as output and Pin D0 as Floating input
  6c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setDirection>


int main(void)
{
	char currLED = 5;
	char currIndex = 0;
  70:	90 e0       	ldi	r25, 0x00	; 0
}


int main(void)
{
	char currLED = 5;
  72:	85 e0       	ldi	r24, 0x05	; 5
	char currIndex = 0;
	setDirection(); //All PortD Pins as output and Pin D0 as Floating input
    while(1)
    {
		if(GET_BIT(PIND,0) == 1){
  74:	80 9b       	sbis	0x10, 0	; 16
  76:	fe cf       	rjmp	.-4      	; 0x74 <main+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	e7 ea       	ldi	r30, 0xA7	; 167
  7a:	f1 e6       	ldi	r31, 0x61	; 97
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <main+0x10>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x16>
  82:	00 00       	nop
			_delay_ms(100); //to counter debouncing
			if(GET_BIT(PIND,0) == 1){
  84:	80 9b       	sbis	0x10, 0	; 16
  86:	f6 cf       	rjmp	.-20     	; 0x74 <main+0x8>
				SET_BIT(PORTD,currLED);
  88:	42 b3       	in	r20, 0x12	; 18
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	24 2b       	or	r18, r20
  9a:	22 bb       	out	0x12, r18	; 18
				currIndex = (currIndex + 1) % 3;
  9c:	89 2f       	mov	r24, r25
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	0e 94 71 00 	call	0xe2	; 0xe2 <__divmodhi4>
  aa:	98 2f       	mov	r25, r24
				currLED = 5 + currIndex;
  ac:	8b 5f       	subi	r24, 0xFB	; 251
				while(GET_BIT(PIND,0) == 1);
  ae:	80 99       	sbic	0x10, 0	; 16
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x42>
  b2:	e0 cf       	rjmp	.-64     	; 0x74 <main+0x8>

Disassembly of section .text.libgcc.div:

000000e2 <__divmodhi4>:
  e2:	97 fb       	bst	r25, 7
  e4:	07 2e       	mov	r0, r23
  e6:	16 f4       	brtc	.+4      	; 0xec <__divmodhi4+0xa>
  e8:	00 94       	com	r0
  ea:	07 d0       	rcall	.+14     	; 0xfa <__divmodhi4_neg1>
  ec:	77 fd       	sbrc	r23, 7
  ee:	09 d0       	rcall	.+18     	; 0x102 <__divmodhi4_neg2>
  f0:	0e 94 85 00 	call	0x10a	; 0x10a <__udivmodhi4>
  f4:	07 fc       	sbrc	r0, 7
  f6:	05 d0       	rcall	.+10     	; 0x102 <__divmodhi4_neg2>
  f8:	3e f4       	brtc	.+14     	; 0x108 <__divmodhi4_exit>

000000fa <__divmodhi4_neg1>:
  fa:	90 95       	com	r25
  fc:	81 95       	neg	r24
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	08 95       	ret

00000102 <__divmodhi4_neg2>:
 102:	70 95       	com	r23
 104:	61 95       	neg	r22
 106:	7f 4f       	sbci	r23, 0xFF	; 255

00000108 <__divmodhi4_exit>:
 108:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000010a <__udivmodhi4>:
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	51 e1       	ldi	r21, 0x11	; 17
 110:	07 c0       	rjmp	.+14     	; 0x120 <__udivmodhi4_ep>

00000112 <__udivmodhi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	a6 17       	cp	r26, r22
 118:	b7 07       	cpc	r27, r23
 11a:	10 f0       	brcs	.+4      	; 0x120 <__udivmodhi4_ep>
 11c:	a6 1b       	sub	r26, r22
 11e:	b7 0b       	sbc	r27, r23

00000120 <__udivmodhi4_ep>:
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	a9 f7       	brne	.-22     	; 0x112 <__udivmodhi4_loop>
 128:	80 95       	com	r24
 12a:	90 95       	com	r25
 12c:	bc 01       	movw	r22, r24
 12e:	cd 01       	movw	r24, r26
 130:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000150 <_fini>:
 150:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000152 <__funcs_on_exit>:
 152:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000154 <__simulator_exit>:
 154:	08 95       	ret

Disassembly of section .text.exit:

00000132 <exit>:
 132:	ec 01       	movw	r28, r24
 134:	0e 94 a9 00 	call	0x152	; 0x152 <__funcs_on_exit>
 138:	0e 94 a8 00 	call	0x150	; 0x150 <_fini>
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 aa 00 	call	0x154	; 0x154 <__simulator_exit>
 142:	ce 01       	movw	r24, r28
 144:	0e 94 a6 00 	call	0x14c	; 0x14c <_Exit>

Disassembly of section .text._Exit:

0000014c <_Exit>:
 14c:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
