
Serial_LEDs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b7  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setDirection 00000008  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000005a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000ee  000000ee  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
   c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  34:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  3c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  4c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
  50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000e4 <__bad_interrupt>:
  e4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setDirection:

000000dc <setDirection>:
#define DDRD   *(volatile unsigned char *)0x31
#define PORTD  *(volatile unsigned char *)0x32

void setDirection(void){
	for(char i = 5 ; i < 8 ; i++){
		SET_BIT(DDRD,i);
  dc:	8d 9a       	sbi	0x11, 5	; 17
  de:	8e 9a       	sbi	0x11, 6	; 17
  e0:	8f 9a       	sbi	0x11, 7	; 17
  e2:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
	}
}

int main(void)
{
	setDirection(); //configure all Port D pins to be output
  6c:	0e 94 6e 00 	call	0xdc	; 0xdc <setDirection>
    while(1)
    {
        for(unsigned char i = 5 ; i < 8 ; i++){
			SET_BIT(PORTD,i);
  70:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e4       	ldi	r24, 0x4F	; 79
  74:	93 ec       	ldi	r25, 0xC3	; 195
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <main+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <main+0x10>
  7c:	00 00       	nop
  7e:	96 9a       	sbi	0x12, 6	; 18
  80:	8f e4       	ldi	r24, 0x4F	; 79
  82:	93 ec       	ldi	r25, 0xC3	; 195
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
  8c:	97 9a       	sbi	0x12, 7	; 18
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	93 ec       	ldi	r25, 0xC3	; 195
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
			_delay_ms(200);
		}
		
		for(unsigned char i = 7 ; i >= 5 ; i--){
			  CLR_BIT(PORTD,i);
  9a:	97 98       	cbi	0x12, 7	; 18
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
  a8:	96 98       	cbi	0x12, 6	; 18
  aa:	8f e4       	ldi	r24, 0x4F	; 79
  ac:	93 ec       	ldi	r25, 0xC3	; 195
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
  b6:	95 98       	cbi	0x12, 5	; 18
  b8:	8f e4       	ldi	r24, 0x4F	; 79
  ba:	93 ec       	ldi	r25, 0xC3	; 195
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x50>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	d5 cf       	rjmp	.-86     	; 0x70 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000ec <_fini>:
  ec:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ee <__funcs_on_exit>:
  ee:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f0 <__simulator_exit>:
  f0:	08 95       	ret

Disassembly of section .text.exit:

000000c6 <exit>:
  c6:	ec 01       	movw	r28, r24
  c8:	0e 94 77 00 	call	0xee	; 0xee <__funcs_on_exit>
  cc:	0e 94 76 00 	call	0xec	; 0xec <_fini>
  d0:	ce 01       	movw	r24, r28
  d2:	0e 94 78 00 	call	0xf0	; 0xf0 <__simulator_exit>
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 74 00 	call	0xe8	; 0xe8 <_Exit>

Disassembly of section .text._Exit:

000000e8 <_Exit>:
  e8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
