
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000470  08000478  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000470  08000470  00010478  2**0
                  CONTENTS
  4 .ARM          00000000  08000470  08000470  00010478  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000470  08000478  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000478  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000478  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000e6  00000000  00000000  000104a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b6  00000000  00000000  00010587  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00010640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00010698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ae3  00000000  00000000  000106d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000124  00000000  00000000  000111bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003069  00000000  00000000  000112df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00014348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000143c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000458 	.word	0x08000458

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000458 	.word	0x08000458

08000170 <GPIO_init>:
#define GPIOB_IDR *(volatile unsigned int *)(GPIOB_BASE + 0x08)
#define GPIOB_ODR *(volatile unsigned int *)(GPIOB_BASE + 0x0C)

#define GET_CR_LSB(pin) (((pin < 8) ? pin * 4 : (pin - 8) * 4))

void GPIO_init(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
  
  //enable clock to GPIO A and GPIO B
  SET_BIT(RCC_APB2EN, IOPAEN_PIN);
 8000176:	4b66      	ldr	r3, [pc, #408]	; (8000310 <GPIO_init+0x1a0>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a65      	ldr	r2, [pc, #404]	; (8000310 <GPIO_init+0x1a0>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC_APB2EN, IOPBEN_PIN);
 8000182:	4b63      	ldr	r3, [pc, #396]	; (8000310 <GPIO_init+0x1a0>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a62      	ldr	r2, [pc, #392]	; (8000310 <GPIO_init+0x1a0>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6013      	str	r3, [r2, #0]
  //A13 --> Floating Input
  //B1 --> (Push-Pull) Output
  //B13 --> (Push-Pull) Output

  //A1 Configuration (0100)
  int pin1_LSB = GET_CR_LSB(1); //LSB of pin A1 in CRL
 800018e:	2304      	movs	r3, #4
 8000190:	607b      	str	r3, [r7, #4]
  CLR_BIT(GPIOA_CRL,pin1_LSB);
 8000192:	4b60      	ldr	r3, [pc, #384]	; (8000314 <GPIO_init+0x1a4>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2101      	movs	r1, #1
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	fa01 f202 	lsl.w	r2, r1, r2
 800019e:	43d2      	mvns	r2, r2
 80001a0:	4611      	mov	r1, r2
 80001a2:	4a5c      	ldr	r2, [pc, #368]	; (8000314 <GPIO_init+0x1a4>)
 80001a4:	400b      	ands	r3, r1
 80001a6:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOA_CRL,pin1_LSB + 1);
 80001a8:	4b5a      	ldr	r3, [pc, #360]	; (8000314 <GPIO_init+0x1a4>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	687a      	ldr	r2, [r7, #4]
 80001ae:	3201      	adds	r2, #1
 80001b0:	2101      	movs	r1, #1
 80001b2:	fa01 f202 	lsl.w	r2, r1, r2
 80001b6:	43d2      	mvns	r2, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a56      	ldr	r2, [pc, #344]	; (8000314 <GPIO_init+0x1a4>)
 80001bc:	400b      	ands	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
  SET_BIT(GPIOA_CRL,pin1_LSB + 2);
 80001c0:	4b54      	ldr	r3, [pc, #336]	; (8000314 <GPIO_init+0x1a4>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	3202      	adds	r2, #2
 80001c8:	2101      	movs	r1, #1
 80001ca:	fa01 f202 	lsl.w	r2, r1, r2
 80001ce:	4611      	mov	r1, r2
 80001d0:	4a50      	ldr	r2, [pc, #320]	; (8000314 <GPIO_init+0x1a4>)
 80001d2:	430b      	orrs	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOA_CRL,pin1_LSB + 3);  
 80001d6:	4b4f      	ldr	r3, [pc, #316]	; (8000314 <GPIO_init+0x1a4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	3203      	adds	r2, #3
 80001de:	2101      	movs	r1, #1
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	43d2      	mvns	r2, r2
 80001e6:	4611      	mov	r1, r2
 80001e8:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <GPIO_init+0x1a4>)
 80001ea:	400b      	ands	r3, r1
 80001ec:	6013      	str	r3, [r2, #0]

  //A13 Configuration (0100)
  int pin13_LSB = GET_CR_LSB(13); //LSB of pin A13 in CRH
 80001ee:	2314      	movs	r3, #20
 80001f0:	603b      	str	r3, [r7, #0]
  CLR_BIT(GPIOA_CRH,pin13_LSB);
 80001f2:	4b49      	ldr	r3, [pc, #292]	; (8000318 <GPIO_init+0x1a8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2101      	movs	r1, #1
 80001f8:	683a      	ldr	r2, [r7, #0]
 80001fa:	fa01 f202 	lsl.w	r2, r1, r2
 80001fe:	43d2      	mvns	r2, r2
 8000200:	4611      	mov	r1, r2
 8000202:	4a45      	ldr	r2, [pc, #276]	; (8000318 <GPIO_init+0x1a8>)
 8000204:	400b      	ands	r3, r1
 8000206:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOA_CRH,pin13_LSB + 1);
 8000208:	4b43      	ldr	r3, [pc, #268]	; (8000318 <GPIO_init+0x1a8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	3201      	adds	r2, #1
 8000210:	2101      	movs	r1, #1
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	43d2      	mvns	r2, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4a3f      	ldr	r2, [pc, #252]	; (8000318 <GPIO_init+0x1a8>)
 800021c:	400b      	ands	r3, r1
 800021e:	6013      	str	r3, [r2, #0]
  SET_BIT(GPIOA_CRH,pin13_LSB + 2);
 8000220:	4b3d      	ldr	r3, [pc, #244]	; (8000318 <GPIO_init+0x1a8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	3202      	adds	r2, #2
 8000228:	2101      	movs	r1, #1
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a39      	ldr	r2, [pc, #228]	; (8000318 <GPIO_init+0x1a8>)
 8000232:	430b      	orrs	r3, r1
 8000234:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOA_CRH,pin13_LSB + 3);  
 8000236:	4b38      	ldr	r3, [pc, #224]	; (8000318 <GPIO_init+0x1a8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	3203      	adds	r2, #3
 800023e:	2101      	movs	r1, #1
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	43d2      	mvns	r2, r2
 8000246:	4611      	mov	r1, r2
 8000248:	4a33      	ldr	r2, [pc, #204]	; (8000318 <GPIO_init+0x1a8>)
 800024a:	400b      	ands	r3, r1
 800024c:	6013      	str	r3, [r2, #0]

  //B1 Configuration (0001)
  SET_BIT(GPIOB_CRL,pin1_LSB);
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <GPIO_init+0x1ac>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2101      	movs	r1, #1
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a2f      	ldr	r2, [pc, #188]	; (800031c <GPIO_init+0x1ac>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRL,pin1_LSB + 1);
 8000262:	4b2e      	ldr	r3, [pc, #184]	; (800031c <GPIO_init+0x1ac>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	3201      	adds	r2, #1
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	43d2      	mvns	r2, r2
 8000272:	4611      	mov	r1, r2
 8000274:	4a29      	ldr	r2, [pc, #164]	; (800031c <GPIO_init+0x1ac>)
 8000276:	400b      	ands	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRL,pin1_LSB + 2);
 800027a:	4b28      	ldr	r3, [pc, #160]	; (800031c <GPIO_init+0x1ac>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	3202      	adds	r2, #2
 8000282:	2101      	movs	r1, #1
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a23      	ldr	r2, [pc, #140]	; (800031c <GPIO_init+0x1ac>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRL,pin1_LSB + 3);  
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <GPIO_init+0x1ac>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	3203      	adds	r2, #3
 800029a:	2101      	movs	r1, #1
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <GPIO_init+0x1ac>)
 80002a6:	400b      	ands	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]

  //B13 Configuration (0001)
  SET_BIT(GPIOB_CRH,pin13_LSB);
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <GPIO_init+0x1b0>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2101      	movs	r1, #1
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <GPIO_init+0x1b0>)
 80002ba:	430b      	orrs	r3, r1
 80002bc:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRH,pin13_LSB + 1);
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <GPIO_init+0x1b0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	3201      	adds	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <GPIO_init+0x1b0>)
 80002d2:	400b      	ands	r3, r1
 80002d4:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRH,pin13_LSB + 2);
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <GPIO_init+0x1b0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	3202      	adds	r2, #2
 80002de:	2101      	movs	r1, #1
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <GPIO_init+0x1b0>)
 80002ea:	400b      	ands	r3, r1
 80002ec:	6013      	str	r3, [r2, #0]
  CLR_BIT(GPIOB_CRH,pin13_LSB + 3);  
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <GPIO_init+0x1b0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	3203      	adds	r2, #3
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <GPIO_init+0x1b0>)
 8000302:	400b      	ands	r3, r1
 8000304:	6013      	str	r3, [r2, #0]

}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	40021018 	.word	0x40021018
 8000314:	40010800 	.word	0x40010800
 8000318:	40010804 	.word	0x40010804
 800031c:	40010c00 	.word	0x40010c00
 8000320:	40010c04 	.word	0x40010c04

08000324 <delay>:

void delay(int time){
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < time ; i++){
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	e00b      	b.n	800034a <delay+0x26>
    for(int j = 0 ; j < 255 ; j++);
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	e002      	b.n	800033e <delay+0x1a>
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3301      	adds	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	2bfe      	cmp	r3, #254	; 0xfe
 8000342:	ddf9      	ble.n	8000338 <delay+0x14>
  for(int i = 0 ; i < time ; i++){
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	429a      	cmp	r2, r3
 8000350:	dbef      	blt.n	8000332 <delay+0xe>
  }
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <main>:

int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  GPIO_init();
 8000360:	f7ff ff06 	bl	8000170 <GPIO_init>
    /* Loop forever */
	for(;;){
    if(GET_BIT(GPIOA_IDR,1) == 0){ //single press
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <main+0x58>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	085b      	lsrs	r3, r3, #1
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	2b00      	cmp	r3, #0
 8000370:	d10d      	bne.n	800038e <main+0x32>
      TGL_BIT(GPIOB_ODR, 1);
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <main+0x5c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <main+0x5c>)
 8000378:	f083 0302 	eor.w	r3, r3, #2
 800037c:	6013      	str	r3, [r2, #0]
      while(GET_BIT(GPIOA_IDR,1) == 0);
 800037e:	bf00      	nop
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0x58>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	085b      	lsrs	r3, r3, #1
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <main+0x24>
    }
    if(GET_BIT(GPIOA_IDR,13) == 1){ //multiple press
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <main+0x58>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	0b5b      	lsrs	r3, r3, #13
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b01      	cmp	r3, #1
 800039a:	d105      	bne.n	80003a8 <main+0x4c>
      TGL_BIT(GPIOB_ODR, 13);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <main+0x5c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <main+0x5c>)
 80003a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80003a6:	6013      	str	r3, [r2, #0]
    }
    delay(1000);
 80003a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ac:	f7ff ffba 	bl	8000324 <delay>
    if(GET_BIT(GPIOA_IDR,1) == 0){ //single press
 80003b0:	e7d8      	b.n	8000364 <main+0x8>
 80003b2:	bf00      	nop
 80003b4:	40010808 	.word	0x40010808
 80003b8:	40010c0c 	.word	0x40010c0c

080003bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490d      	ldr	r1, [pc, #52]	; (80003fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ea:	f000 f811 	bl	8000410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ee:	f7ff ffb5 	bl	800035c <main>

080003f2 <LoopForever>:

LoopForever:
    b LoopForever
 80003f2:	e7fe      	b.n	80003f2 <LoopForever>
  ldr   r0, =_estack
 80003f4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000400:	08000478 	.word	0x08000478
  ldr r2, =_sbss
 8000404:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000408:	2000001c 	.word	0x2000001c

0800040c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800040c:	e7fe      	b.n	800040c <ADC1_2_IRQHandler>
	...

08000410 <__libc_init_array>:
 8000410:	b570      	push	{r4, r5, r6, lr}
 8000412:	2500      	movs	r5, #0
 8000414:	4e0c      	ldr	r6, [pc, #48]	; (8000448 <__libc_init_array+0x38>)
 8000416:	4c0d      	ldr	r4, [pc, #52]	; (800044c <__libc_init_array+0x3c>)
 8000418:	1ba4      	subs	r4, r4, r6
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	42a5      	cmp	r5, r4
 800041e:	d109      	bne.n	8000434 <__libc_init_array+0x24>
 8000420:	f000 f81a 	bl	8000458 <_init>
 8000424:	2500      	movs	r5, #0
 8000426:	4e0a      	ldr	r6, [pc, #40]	; (8000450 <__libc_init_array+0x40>)
 8000428:	4c0a      	ldr	r4, [pc, #40]	; (8000454 <__libc_init_array+0x44>)
 800042a:	1ba4      	subs	r4, r4, r6
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	42a5      	cmp	r5, r4
 8000430:	d105      	bne.n	800043e <__libc_init_array+0x2e>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000438:	4798      	blx	r3
 800043a:	3501      	adds	r5, #1
 800043c:	e7ee      	b.n	800041c <__libc_init_array+0xc>
 800043e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000442:	4798      	blx	r3
 8000444:	3501      	adds	r5, #1
 8000446:	e7f2      	b.n	800042e <__libc_init_array+0x1e>
 8000448:	08000470 	.word	0x08000470
 800044c:	08000470 	.word	0x08000470
 8000450:	08000470 	.word	0x08000470
 8000454:	08000474 	.word	0x08000474

08000458 <_init>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr

08000464 <_fini>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr
